--- a/lua_cjson.c
+++ b/lua_cjson.c
@@ -130,6 +130,7 @@
     int encode_invalid_numbers;     /* 2 => Encode as "null" */
     int encode_number_precision;
     int encode_keep_buffer;
+    int encode_sort;
 
     int decode_invalid_numbers;
     int decode_max_depth;
@@ -362,6 +363,17 @@
     return 1;
 }
 
+static int json_cfg_encode_sort(lua_State *l)
+{
+    json_config_t *cfg = json_arg_init(l, 1);
+
+    json_enum_option(l, 1, &cfg->encode_sort, NULL, 1);
+
+    json_verify_invalid_number_setting(l, &cfg->encode_sort);
+
+    return 1;
+}
+
 static int json_destroy_config(lua_State *l)
 {
     json_config_t *cfg;
@@ -394,6 +406,7 @@
     cfg->decode_max_depth = DEFAULT_DECODE_MAX_DEPTH;
     cfg->encode_invalid_numbers = DEFAULT_ENCODE_INVALID_NUMBERS;
     cfg->decode_invalid_numbers = DEFAULT_DECODE_INVALID_NUMBERS;
+    cfg->encode_sort = 1;
     cfg->encode_keep_buffer = DEFAULT_ENCODE_KEEP_BUFFER;
     cfg->encode_number_precision = DEFAULT_ENCODE_NUMBER_PRECISION;
 
@@ -627,32 +640,48 @@
     strbuf_extend_length(json, len);
 }
 
+int str_sort_fn(const void *a, const void *b)
+{
+    return strcmp(*(const char**)a, *(const char**)b);
+}
+
 static void json_append_object(lua_State *l, json_config_t *cfg,
                                int current_depth, strbuf_t *json)
 {
-    int comma, keytype;
+    int comma = 0, keytype;
+    int numStrKeys = 0, i = 0;
 
     /* Object */
     strbuf_append_char(json, '{');
 
+    /* count the string keys - the only way to do this is by iterating */
+    lua_pushnil(l);
+    while (lua_next(l, -2) != 0) {
+        if (lua_type(l, -2) == LUA_TSTRING)
+            numStrKeys++;
+        lua_pop(l, 1);
+    }
+    const char *keys[numStrKeys];
+
+    /* get string keys first and sort them */
+    /* we don't care about number keys - just print them now */
     lua_pushnil(l);
     /* table, startkey */
-    comma = 0;
     while (lua_next(l, -2) != 0) {
+        /* table, key, value */
+        keytype = lua_type(l, -2);
+        if (keytype == LUA_TNUMBER) {
         if (comma)
             strbuf_append_char(json, ',');
         else
             comma = 1;
 
-        /* table, key, value */
-        keytype = lua_type(l, -2);
-        if (keytype == LUA_TNUMBER) {
             strbuf_append_char(json, '"');
             json_append_number(l, cfg, json, -2);
             strbuf_append_mem(json, "\":", 2);
+            json_append_data(l, cfg, current_depth, json);
         } else if (keytype == LUA_TSTRING) {
-            json_append_string(l, json, -2);
-            strbuf_append_char(json, ':');
+            keys[i++] = lua_tolstring(l, -2, NULL);
         } else {
             json_encode_exception(l, cfg, json, -2,
                                   "table key must be a number or string");
@@ -660,11 +689,32 @@
         }
 
         /* table, key, value */
-        json_append_data(l, cfg, current_depth, json);
         lua_pop(l, 1);
         /* table, key */
     }
 
+    /* sort the keys */
+    if (cfg->encode_sort) {
+        qsort(keys, numStrKeys, sizeof(*keys), str_sort_fn);
+    }
+
+    /* push string keys */
+    for (i = 0; i < numStrKeys; i++) {
+        if (comma)
+            strbuf_append_char(json, ',');
+        else
+            comma = 1;
+
+        lua_pushstring(l, keys[i]);
+        json_append_string(l, json, -1);
+        strbuf_append_char(json, ':');
+
+        lua_gettable(l, -2);
+        json_append_data(l, cfg, current_depth, json);
+
+        lua_pop(l, 1);
+    }
+
     strbuf_append_char(json, '}');
 }
 
@@ -1365,6 +1415,7 @@
         { "encode_keep_buffer", json_cfg_encode_keep_buffer },
         { "encode_invalid_numbers", json_cfg_encode_invalid_numbers },
         { "decode_invalid_numbers", json_cfg_decode_invalid_numbers },
+        { "encode_sort", json_cfg_encode_sort },
         { "new", lua_cjson_new },
         { NULL, NULL }
     };
