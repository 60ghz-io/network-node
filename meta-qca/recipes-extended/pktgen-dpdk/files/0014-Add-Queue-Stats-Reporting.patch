From 3e45f4b6e80f72d0fe68d5d2ff527ace446c702f Mon Sep 17 00:00:00 2001
From: MatthewWEdwards <matthewedwards@fb.com>
Date: Mon, 9 Nov 2020 14:01:43 -0800
Subject: [PATCH] Add Queue Stats Reporting

---
 app/meson.build       |  3 ++-
 app/pktgen-links.c    | 16 ++++------------
 app/pktgen-main.c     |  2 ++
 app/pktgen-port-cfg.c |  6 ++----
 app/pktgen-port-cfg.h |  1 +
 app/pktgen-stats.c    | 44 ++++++++++++++++++++++++++++++++++++++++++-
 app/pktgen-stats.h    | 11 +++++++++++
 app/pktgen-utils.c    | 21 +++++++++++++++++++++
 app/pktgen-utils.h    | 23 ++++++++++++++++++++++
 app/pktgen.c          |  9 ++++++++-
 10 files changed, 117 insertions(+), 19 deletions(-)
 create mode 100644 app/pktgen-utils.c
 create mode 100644 app/pktgen-utils.h

diff --git a/app/meson.build b/app/meson.build
index ac5ef04..4b55249 100644
--- a/app/meson.build
+++ b/app/meson.build
@@ -5,7 +5,8 @@ sources = files(
 	'pktgen-port-cfg.c', 'pktgen-ipv6.c', 'pktgen-ipv4.c', 'pktgen-arp.c',
 	'pktgen-gre.c', 'pktgen-ether.c', 'pktgen-tcp.c', 'pktgen-udp.c', 'pktgen-vlan.c',
 	'pktgen-random.c', 'pktgen-display.c', 'pktgen-log.c', 'pktgen-stat-log.c',
-	'pktgen-gtpu.c', 'pktgen-latency.c', 'pktgen-rate.c', 'pktgen-links.c'
+	'pktgen-gtpu.c', 'pktgen-latency.c', 'pktgen-rate.c', 'pktgen-links.c',
+	'pktgen-utils.c'
 )
 
 if get_option('enable_gui')
diff --git a/app/pktgen-links.c b/app/pktgen-links.c
index 413c8e0..5d1c5e3 100644
--- a/app/pktgen-links.c
+++ b/app/pktgen-links.c
@@ -8,20 +8,12 @@
 
 #include <stdlib.h>
 
+#include "rte_ethdev.h"
+
 #include "pktgen.h"
-#include "pktgen-links.h"
 #include "pktgen-cmds.h"
-
-static __inline__
-uint16_t hamming_weight(uint16_t x)
-{
-      x = ((x & 0xAAAAAAAA) >> 1)  + (x & 0x55555555);
-      x = ((x & 0xCCCCCCCC) >> 2)  + (x & 0x33333333);
-      x = ((x & 0xF0F0F0F0) >> 4)  + (x & 0x0F0F0F0F);
-      x = ((x & 0xFF00FF00) >> 8)  + (x & 0x00FF00FF);
-      x = ((x & 0xFFFF0000) >> 16) + (x & 0x0000FFFF);
-      return (int) x;
-}
+#include "pktgen-links.h"
+#include "pktgen-utils.h"
 
 __inline__ bool
 link_is_active(port_info_t *info, uint16_t idx)
diff --git a/app/pktgen-main.c b/app/pktgen-main.c
index 7eeeabc..5084ebc 100644
--- a/app/pktgen-main.c
+++ b/app/pktgen-main.c
@@ -8,6 +8,7 @@
 
 #include <execinfo.h>
 #include <signal.h>
+#include <pthread.h>
 #include <locale.h>
 
 #include <lua_config.h>
@@ -30,6 +31,7 @@
 #include "pktgen-log.h"
 #include "pktgen-stat-log.h"
 #include "cli-functions.h"
+#include "pktgen-links.h"
 
 /* Offset to the mbuf dynamic field holding pktgen data. */
 int pktgen_dynfield_offset = -1;
diff --git a/app/pktgen-port-cfg.c b/app/pktgen-port-cfg.c
index 02da211..e00c53d 100644
--- a/app/pktgen-port-cfg.c
+++ b/app/pktgen-port-cfg.c
@@ -372,10 +372,6 @@ pktgen_config_ports(void)
 			if (ret < 0)
 				pktgen_log_panic("rte_eth_rx_queue_setup: err=%d, port=%d, %s",
 						 ret, pid, rte_strerror(-ret));
-			lid = get_port_lid(pktgen.l2p, pid, q);
-			if (pktgen.verbose)
-				pktgen_log_info("      Set RX queue stats mapping pid %d, q %d, lcore %d\n", pid, q, lid);
-			rte_eth_dev_set_rx_queue_stats_mapping(pid, q, lid);
 		}
 		if (pktgen.verbose)
 			pktgen_log_info("");
@@ -504,6 +500,8 @@ pktgen_config_ports(void)
         pktgen_clear_stats(info);
 
 		pktgen_rnd_bits_init(&pktgen.info[pid].rnd_bitfields);
+
+		pktgen_setup_queue_stats(&pktgen.info[pid].link_stats);
 	}
 
 	/* Clear the log information by putting a blank line */
diff --git a/app/pktgen-port-cfg.h b/app/pktgen-port-cfg.h
index d18e5ce..d364b4d 100644
--- a/app/pktgen-port-cfg.h
+++ b/app/pktgen-port-cfg.h
@@ -303,6 +303,7 @@ typedef struct port_info_s {
     char user_pattern[USER_PATTERN_SIZE]; /**< User set pattern values */
     fill_t fill_pattern_type;             /**< Type of pattern to fill with */
     uint16_t links; /**< active links for this port's radio sector. bitwise flags*/
+    link_stats_t link_stats;
 
     /* Latency sampling data */
     /* Depending on MAX_LATENCY_ENTRIES, this could blow up static array memory usage
diff --git a/app/pktgen-stats.c b/app/pktgen-stats.c
index da6e376..7b4304b 100644
--- a/app/pktgen-stats.c
+++ b/app/pktgen-stats.c
@@ -7,13 +7,15 @@
 /* Created 2010 by Keith Wiles @ intel.com */
 
 #include <stdio.h>
+#include <stdlib.h>
+#include "time.h"
 
 #include <pg_delay.h>
 #include <lua_config.h>
 
 #include "pktgen-cmds.h"
 #include "pktgen-display.h"
-
+#include "pktgen-stats.h"
 #include "pktgen.h"
 
 #if __RTE_VERSION >= RTE_VERSION_NUM(17, 11, 0, 0)
@@ -818,3 +820,43 @@ pktgen_page_xstats(uint16_t pid)
     pktgen_display_set_color(NULL);
     scrn_eol();
 }
+
+static void
+calculate_stats(port_info_t *info, uint64_t time)
+{
+    if (info->link_stats.lasttime == 0) {
+        info->link_stats.lasttime = time;
+        return;
+    }
+
+    uint64_t deltatime = time - info->link_stats.lasttime; // TODO: Use in queue stats calculation
+    for (uint8_t link = 0; link < TG_LINKS_PER_PORT; link++) {
+        info->link_stats.queue_stats[link].bytes = 0; // TODO: Proper bytes pending calculation
+        info->link_stats.queue_stats[link].arrival_rate = 0; // TODO: Proper arrival rate calculation
+    }
+    info->link_stats.lasttime = time;
+}
+
+static void
+send_queue_stats(port_info_t *info)
+{
+    // send may fail if an ioctl is being processed already, retry
+    for (uint8_t i = 0; i < QUEUE_STATS_SEND_TRIES; i++) {
+        int rc = rte_eth_send_tx_pending_stats(info->pid, 0, info->link_stats.queue_stats, TG_LINKS_PER_PORT);
+        if (rc == 0)
+            break;
+    }
+}
+
+void
+pktgen_queue_stats(uint64_t time)
+{
+    forall_ports(calculate_stats(info, time));
+    forall_ports(send_queue_stats(info));
+}
+
+void
+pktgen_setup_queue_stats(link_stats_t *link_stats)
+{
+    memset(link_stats, 0, sizeof(link_stats_t));
+}
diff --git a/app/pktgen-stats.h b/app/pktgen-stats.h
index 13a6a7e..3116d86 100644
--- a/app/pktgen-stats.h
+++ b/app/pktgen-stats.h
@@ -8,8 +8,12 @@
 #ifndef _PKTGEN_STATS_H_
 #define _PKTGEN_STATS_H_
 
+#include <rte_ethdev.h>
 #include <rte_timer.h>
 
+#define STATS_INTERVAL_MS 20
+#define QUEUE_STATS_SEND_TRIES 5
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -32,6 +36,11 @@ typedef struct pkt_stats_s {
 	uint64_t rx_nombuf;	/**< Number of times we had not mbufs for Rx */
 } pkt_stats_t;
 
+typedef struct link_stats_s {
+	struct rte_eth_tx_pending_stats queue_stats[TG_LINKS_PER_PORT];
+	uint64_t lasttime;
+} link_stats_t;
+
 struct port_info_s;
 
 void pktgen_get_link_status(struct port_info_s *info, int pid, int wait);
@@ -40,6 +49,8 @@ void pktgen_process_stats(struct rte_timer *tim, void *arg);
 void pktgen_page_stats(void);
 void pktgen_page_phys_stats(uint16_t pid);
 void pktgen_page_xstats(uint16_t pid);
+void pktgen_queue_stats(uint64_t time);
+void pktgen_setup_queue_stats(link_stats_t *link_stats);
 
 #ifdef __cplusplus
 }
diff --git a/app/pktgen-utils.c b/app/pktgen-utils.c
new file mode 100644
index 0000000..3a32d94
--- /dev/null
+++ b/app/pktgen-utils.c
@@ -0,0 +1,21 @@
+/*-
+ * Copyright (c) <2010-2019>, Intel Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/* Created 2010 by Keith Wiles @ intel.com */
+
+#include "pktgen-utils.h"
+
+__inline__
+uint16_t hamming_weight(uint16_t x)
+{
+      x = ((x & 0xAAAAAAAA) >> 1)  + (x & 0x55555555);
+      x = ((x & 0xCCCCCCCC) >> 2)  + (x & 0x33333333);
+      x = ((x & 0xF0F0F0F0) >> 4)  + (x & 0x0F0F0F0F);
+      x = ((x & 0xFF00FF00) >> 8)  + (x & 0x00FF00FF);
+      x = ((x & 0xFFFF0000) >> 16) + (x & 0x0000FFFF);
+      return (int) x;
+}
+
diff --git a/app/pktgen-utils.h b/app/pktgen-utils.h
new file mode 100644
index 0000000..dd4979c
--- /dev/null
+++ b/app/pktgen-utils.h
@@ -0,0 +1,23 @@
+/*-
+ * Copyright (c) <2010-2019>, Intel Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+/* Created 2010 by Keith Wiles @ intel.com */
+
+#ifndef _PKTGEN_UTILS_H_
+#define _PKTGEN_UTILS_H_
+
+#include <stdint.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+uint16_t hamming_weight(uint16_t x);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  /* _PKTGEN_UTILS_H_ */
diff --git a/app/pktgen.c b/app/pktgen.c
index d245429..c99f47c 100644
--- a/app/pktgen.c
+++ b/app/pktgen.c
@@ -1725,17 +1725,19 @@ pktgen_page_display(struct rte_timer *tim __rte_unused, void *arg __rte_unused)
 static void *
 _timer_thread(void *arg)
 {
-	uint64_t process, page, stat_logger, process_timo, page_timo, stat_logger_timo;
+	uint64_t process, page, stat_logger, queue_stats, process_timo, page_timo, stat_logger_timo, queue_stats_timo;
 
 	this_scrn = arg;
 
 	process_timo = pktgen.hz;
 	page_timo = UPDATE_DISPLAY_TICK_RATE;
 	stat_logger_timo = UPDATE_STAT_LOG_TICK_RATE;
+	queue_stats_timo = pktgen.hz * STATS_INTERVAL_MS * 1e-3;
 
 	page = rte_get_tsc_cycles();
 	process = page + process_timo;
 	stat_logger = page + stat_logger_timo;
+	queue_stats = page + queue_stats_timo;
 	page += page_timo;
 
 	pktgen.timer_running = 1;
@@ -1760,6 +1762,11 @@ _timer_thread(void *arg)
 			stat_logger = curr + stat_logger_timo;
 		}
 
+		if (curr >= queue_stats) {
+			pktgen_queue_stats(curr);
+			queue_stats = curr + queue_stats_timo;
+		}
+
 		rte_pause();
 	}
 	return NULL;
-- 
2.30.2

