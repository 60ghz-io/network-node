#!/bin/sh
#
# Creates firmware core dump when using the wil6210 kernel driver by getting
# contents of necessary firmware mapping sections from debugfs.
#
# When using the PMD, firmware core dumps are by default written to
# /var/volatile/cores/wil6210_fw_core_<pci>_<date> when a firmware crash occurs.
#
# If only firmware and/or microcode logs are needed, consider using wil_fw_trace
# or the accompanying script run_wil_fw_trace.sh to collect just the logs.
#

# Ordered names of firmware mapping sections that comprise the core dump.
# Numbers represent the number of null bytes in empty sections that separate
# other sections in the core dump. These empty sections are inserted so that
# the core dump generated by this script matches the one created by the driver.
# Derived from firmware mapping information found in wil6210/wmi.c
fw_map_sections="
    rgf
    AGC_tbl
    rgf_ext
    mac_rgf_ext
    1840
    ext_user_rgf
    8192
    sec_pka
    16384
    sec_kdf_rgf
    5096
    sec_main
    87988
    dma_ext_rgf
    dum_user_rgf
    7664
    dma_ofu
    3800
    ucode_debug
    249600
    upper1
    262144
    upper2
"

if [ $# -ne 2 ]; then
    echo "Usage: $0 pci_addr output_file " >&2
    exit 1
fi

pci_addr=$1
output_file=$2

# Check that wil6210 kernel driver is in use for this pci device.
if ! ifname=$(ls /sys/bus/pci/drivers/wil6210/"$pci_addr"/net); then
    echo "wil6210 driver not in use for $pci_addr"
    exit 1
fi

# Use last character of interface name as wil6210 index.
index=${ifname#"${ifname%?}"}

# Check if debugfs is already mounted somewhere. If not, mount debugfs.
debugfs=$(awk '/^debugfs\s+/ { print $2; exit }' /proc/mounts)
if [ -z "${debugfs}" ]; then
    debugfs="/sys/kernel/debug"
    mount -t debugfs none "$debugfs"
fi

echo "creating core dump for pci device $pci_addr (interface $ifname) from debugfs entries in $debugfs/wil6210_$index"

# remove file if it exists since we write core dump by appending sections
[ ! -e output_file ] || rm output_file

# Get core dump contents from each firmware mapping section via debugfs.
# Output null bytes as appropriate to separate firmware mapping sections and to
# match the format of the core dump that is created by the driver.
for section in $fw_map_sections; do
    # check if this is a number of null bytes to output
    if ! [ -z "${section##*[!0-9]*}" ]; then
        head -c "$section" /dev/zero >> "$output_file"
    else
        cat "$debugfs/wil6210_$index/blob_$section" >> "$output_file"
    fi
done

echo "core dump written to $output_file"
