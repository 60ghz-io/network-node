From 0087d9934e84153963d38754f5ebe65c0e5e303e Mon Sep 17 00:00:00 2001
From: Alexander Kabaev <kan@fb.com>
Date: Wed, 15 Aug 2018 20:07:41 -0700
Subject: [PATCH] Set IBE bit for GPIO pins on LSCH3 platform

The input buffer enable bit allows input levels sensed at GPIO pin
to propagate back into the data registers.  Without this bit set,
we cannot read back the value from output pins and cannot get any
real reading from input pins.
---
 drivers/gpio/gpio-mpc8xxx.c | 59 +++++++++++++++++++++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/drivers/gpio/gpio-mpc8xxx.c b/drivers/gpio/gpio-mpc8xxx.c
index 8c93dec498fa..fd4a0264537a 100644
--- a/drivers/gpio/gpio-mpc8xxx.c
+++ b/drivers/gpio/gpio-mpc8xxx.c
@@ -31,6 +31,7 @@
 #define GPIO_IMR		0x10
 #define GPIO_ICR		0x14
 #define GPIO_ICR2		0x18
+#define GPIO_IBE		0x18
 
 struct mpc8xxx_gpio_chip {
 	struct gpio_chip	gc;
@@ -39,6 +40,7 @@ struct mpc8xxx_gpio_chip {
 
 	int (*direction_output)(struct gpio_chip *chip,
 				unsigned offset, int value);
+	int (*direction_input)(struct gpio_chip *chip, unsigned offset);
 
 	struct irq_domain *irq;
 	unsigned int irqn;
@@ -84,6 +86,53 @@ static int mpc5125_gpio_dir_out(struct gpio_chip *gc,
 	return mpc8xxx_gc->direction_output(gc, gpio, val);
 }
 
+/*
+ * When setting the GPIO pin to input or output, set corresponding
+ * IBE bit to allow value at the pin to be propagated to GPIO_DAT
+ * register. For output pins this allows written value to be read
+ * back.
+ */
+static int qoriq_lsch3_gpio_dir_in(struct gpio_chip *gc, unsigned int gpio)
+{
+	struct mpc8xxx_gpio_chip *mpc8xxx_gc = gpiochip_get_data(gc);
+	int ret;
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&mpc8xxx_gc->lock, flags);
+	ret = mpc8xxx_gc->direction_input(gc, gpio);
+	if (ret == 0) {
+		u32 val = gc->read_reg(mpc8xxx_gc->regs + GPIO_IBE);
+		gc->write_reg(mpc8xxx_gc->regs + GPIO_IBE,
+		    val | gc->pin2mask(gc, gpio));
+	}
+	raw_spin_unlock_irqrestore(&mpc8xxx_gc->lock, flags);
+	return ret;
+}
+
+static int qoriq_lsch3_gpio_dir_out(struct gpio_chip *gc,
+				    unsigned int gpio, int val)
+{
+	struct mpc8xxx_gpio_chip *mpc8xxx_gc = gpiochip_get_data(gc);
+	int ret;
+	unsigned long flags;
+
+	/*
+	 * When setting the GPIO pin to input or output, set corresponding
+	 * IBE bit to allow value at the pin to be propagated to GPIO_DAT
+	 * register. For output pins this allows written value to be read
+	 * back.
+	 */
+	raw_spin_lock_irqsave(&mpc8xxx_gc->lock, flags);
+	ret = mpc8xxx_gc->direction_output(gc, gpio, val);
+	if (ret == 0) {
+		u32 val = gc->read_reg(mpc8xxx_gc->regs + GPIO_IBE);
+		gc->write_reg(mpc8xxx_gc->regs + GPIO_IBE,
+		    val | gc->pin2mask(gc, gpio));
+	}
+	raw_spin_unlock_irqrestore(&mpc8xxx_gc->lock, flags);
+	return ret;
+}
+
 static int mpc8xxx_gpio_to_irq(struct gpio_chip *gc, unsigned offset)
 {
 	struct mpc8xxx_gpio_chip *mpc8xxx_gc = gpiochip_get_data(gc);
@@ -251,6 +300,7 @@ static const struct irq_domain_ops mpc8xxx_gpio_irq_ops = {
 
 struct mpc8xxx_gpio_devtype {
 	int (*gpio_dir_out)(struct gpio_chip *, unsigned int, int);
+	int (*gpio_dir_in)(struct gpio_chip *, unsigned int);
 	int (*gpio_get)(struct gpio_chip *, unsigned int);
 	int (*irq_set_type)(struct irq_data *, unsigned int);
 };
@@ -273,6 +323,11 @@ static const struct mpc8xxx_gpio_devtype mpc8xxx_gpio_devtype_default = {
 	.irq_set_type = mpc8xxx_irq_set_type,
 };
 
+static const struct mpc8xxx_gpio_devtype qoriq_lsch3_gpio_devtype = {
+	.gpio_dir_out = qoriq_lsch3_gpio_dir_out,
+	.gpio_dir_in = qoriq_lsch3_gpio_dir_in,
+};
+
 static const struct of_device_id mpc8xxx_gpio_ids[] = {
 	{ .compatible = "fsl,mpc8349-gpio", },
 	{ .compatible = "fsl,mpc8572-gpio", .data = &mpc8572_gpio_devtype, },
@@ -281,6 +336,7 @@ static const struct of_device_id mpc8xxx_gpio_ids[] = {
 	{ .compatible = "fsl,mpc5125-gpio", .data = &mpc5125_gpio_devtype, },
 	{ .compatible = "fsl,pq3-gpio",     },
 	{ .compatible = "fsl,qoriq-gpio",   },
+	{ .compatible = "fsl,qoriq-gpio-lsch3", .data = &qoriq_lsch3_gpio_devtype, },
 	{}
 };
 
@@ -329,6 +385,7 @@ static int mpc8xxx_probe(struct platform_device *pdev)
 	}
 
 	mpc8xxx_gc->direction_output = gc->direction_output;
+	mpc8xxx_gc->direction_input = gc->direction_input;
 
 	if (!devtype)
 		devtype = &mpc8xxx_gpio_devtype_default;
@@ -341,6 +398,8 @@ static int mpc8xxx_probe(struct platform_device *pdev)
 
 	if (devtype->gpio_dir_out)
 		gc->direction_output = devtype->gpio_dir_out;
+	if (devtype->gpio_dir_in)
+		gc->direction_input = devtype->gpio_dir_in;
 	if (devtype->gpio_get)
 		gc->get = devtype->gpio_get;
 
-- 
2.17.1

