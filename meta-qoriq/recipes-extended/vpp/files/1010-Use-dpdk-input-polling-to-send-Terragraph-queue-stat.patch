From cf9c08fe9089a0cef6f463076fe09ad426d49eee Mon Sep 17 00:00:00 2001
From: Frank Li <frankli1@fb.com>
Date: Wed, 22 Apr 2020 22:02:20 -0700
Subject: [PATCH] Use dpdk-input polling to send Terragraph queue stats to
 firmware

Also add CLI command to enable/disable queue stats.
---
 src/plugins/dpdk/device/cli.c  |  53 +++++++++++++++++
 src/plugins/dpdk/device/dpdk.h |   6 ++
 src/plugins/dpdk/device/init.c |   1 +
 src/plugins/dpdk/device/node.c | 104 +++++++++++++++++++++++++++++++++
 4 files changed, 164 insertions(+)

diff --git a/src/plugins/dpdk/device/cli.c b/src/plugins/dpdk/device/cli.c
index 9587cf00c..76ec98551 100644
--- a/src/plugins/dpdk/device/cli.c
+++ b/src/plugins/dpdk/device/cli.c
@@ -615,6 +615,59 @@ VLIB_CLI_COMMAND (show_vpe_version_command, static) = {
 };
 /* *INDENT-ON* */
 
+/**
+ * This command is used to enable or disable sending queue stats to firmware
+ * for a Terragraph Wigig device.
+ */
+static clib_error_t *
+dpdk_queue_stats_enable_disable_command_fn (vlib_main_t * vm,
+					    unformat_input_t * input,
+					    vlib_cli_command_t * cmd)
+{
+  dpdk_main_t *dm = &dpdk_main;
+  u32 hw_if_index = (u32)~0;
+  vnet_hw_interface_t *hw;
+  dpdk_device_t *xd;
+  u8 enable_queue_stats = (u8)~0;
+
+  if (unformat_check_input (input) != UNFORMAT_END_OF_INPUT)
+    unformat (input, "%U", unformat_vnet_hw_interface, dm->vnet_main,
+              &hw_if_index);
+
+  if (unformat_check_input (input) != UNFORMAT_END_OF_INPUT)
+    {
+      if (unformat (input, "disable"))
+        enable_queue_stats = 0;
+      else if (unformat (input, "enable"))
+        enable_queue_stats = 1;
+    }
+
+  if (hw_if_index == (u32)~0)
+    return clib_error_return (0, "Please specify an interface...");
+
+  if (enable_queue_stats == (u8)~0)
+    return clib_error_return (0, "Please specify either enable or disable...");
+
+  hw = vnet_get_hw_interface (dm->vnet_main, hw_if_index);
+  xd = vec_elt_at_index (dm->devices, hw->dev_instance);
+
+  if (xd->pmd != VNET_DPDK_PMD_WIL6210)
+    return clib_error_return (0,
+                              "Queue stats not supported on this interface");
+
+  xd->queue_stats_enabled = enable_queue_stats;
+
+  return NULL;
+}
+
+/* *INDENT-OFF* */
+VLIB_CLI_COMMAND (dpdk_queue_stats_enable_disable_cmd, static) = {
+  .path = "dpdk queue-stats",
+  .short_help = "dpdk queue-stats <interface> enable|disable",
+  .function = dpdk_queue_stats_enable_disable_command_fn,
+};
+/* *INDENT-ON* */
+
 /* Dummy function to get us linked in. */
 void
 dpdk_cli_reference (void)
diff --git a/src/plugins/dpdk/device/dpdk.h b/src/plugins/dpdk/device/dpdk.h
index 2ef389e31..b30f1dc13 100644
--- a/src/plugins/dpdk/device/dpdk.h
+++ b/src/plugins/dpdk/device/dpdk.h
@@ -238,6 +238,12 @@ typedef struct
   f64 time_last_stats_update;
   dpdk_port_type_t port_type;
 
+  u8 queue_stats_enabled;
+  u64 queue_stats_last_time_ms;
+  u32 queue_stats_max_links;
+  u32 queue_stats_tot_arrived_bytes[TGHQOS_SCHED_PIPES_PER_PORT];
+  u32 queue_stats_avg_arrived_bytes_per_ms[TGHQOS_SCHED_PIPES_PER_PORT];
+
   /* mac address */
   u8 *default_mac_address;
 
diff --git a/src/plugins/dpdk/device/init.c b/src/plugins/dpdk/device/init.c
index 21dcd2d8c..281056b48 100644
--- a/src/plugins/dpdk/device/init.c
+++ b/src/plugins/dpdk/device/init.c
@@ -545,6 +545,7 @@ dpdk_lib_init (dpdk_main_t * dm)
 
 	    case VNET_DPDK_PMD_WIL6210:
 	      xd->port_type = VNET_DPDK_PORT_TYPE_WIGIG;
+	      xd->queue_stats_enabled = 1;
 	      break;
 
 	    case VNET_DPDK_PMD_AF_PACKET:
diff --git a/src/plugins/dpdk/device/node.c b/src/plugins/dpdk/device/node.c
index 6e39d1363..3c6242d08 100644
--- a/src/plugins/dpdk/device/node.c
+++ b/src/plugins/dpdk/device/node.c
@@ -462,6 +462,74 @@ dpdk_device_input (vlib_main_t * vm, dpdk_main_t * dm, dpdk_device_t * xd,
   return n_rx_packets;
 }
 
+/**
+ * Terragraph: Calculate arrival rate in bytes per millisecond for a peer.
+ *   Some per peer information is stored for use with moving average
+ *   calculations. This gets called for each peer at every queue stats interval.
+ *
+ * @param xd dpdk_device_t corresponding to current device
+ * @param pipe target pipe (corresponds to peer)
+ * @param curr_time_ms current time for arrival rate calculation
+ *
+ * @return arrival rate for this peer to send to firmware
+ */
+static_always_inline u32 queue_stats_do_arrival_rate (dpdk_device_t *xd,
+                                                   u32 pipe,
+                                                   u64 curr_time_ms)
+{
+  u32 tot_arrived_bytes, arrived_bytes, arrived_bytes_per_ms;
+  u64 time_interval_ms;
+
+  /* calculate instantaneous arrival rate */
+  tot_arrived_bytes = tghqos_port_bytes_arrived (xd->port_id, pipe);
+  arrived_bytes = tot_arrived_bytes - xd->queue_stats_tot_arrived_bytes[pipe];
+
+  xd->queue_stats_tot_arrived_bytes[pipe] = tot_arrived_bytes;
+
+  time_interval_ms = curr_time_ms - xd->queue_stats_last_time_ms;
+  /* do rounded integer division */
+  arrived_bytes_per_ms =
+      (arrived_bytes + (time_interval_ms / 2)) / time_interval_ms;
+
+  /*
+   * Moving average formula for updating the arrival rate:
+   * new-average-arrival-rate = (1/8) instantaneous-arrival-rate +
+   *  (7/8) old-average-arrival-rate
+   */
+  xd->queue_stats_avg_arrived_bytes_per_ms[pipe] =
+      (arrived_bytes_per_ms >> 3) +
+      ((7 * xd->queue_stats_avg_arrived_bytes_per_ms[pipe]) >> 3);
+
+  /*
+   * ensure consistent report of "zero arrival rate" regardless
+   * of the averaging method, sampling rate, or the units used
+   * for the arrival rate
+   */
+  if (xd->queue_stats_avg_arrived_bytes_per_ms[pipe] != 0)
+    {
+      /* updated arrival rate moving average != 0 */
+      return xd->queue_stats_avg_arrived_bytes_per_ms[pipe];
+    }
+  else if (arrived_bytes_per_ms != 0)
+    {
+      /* instantaneous arrival rate != 0 */
+      return arrived_bytes_per_ms;
+    }
+  else if (arrived_bytes != 0)
+    {
+      /* received some bytes */
+      return 1;
+    }
+  else
+    {
+      /* average arrival rate == 0 and no bytes received */
+      return 0;
+    }
+}
+
+#define QUEUE_STATS_INTERVAL_MS  20
+#define QUEUE_STATS_SEND_TRIES    5
+
 VLIB_NODE_FN (dpdk_input_node) (vlib_main_t * vm, vlib_node_runtime_t * node,
 				vlib_frame_t * f)
 {
@@ -472,6 +540,9 @@ VLIB_NODE_FN (dpdk_input_node) (vlib_main_t * vm, vlib_node_runtime_t * node,
   vnet_device_input_runtime_t *rt = (void *) node->runtime_data;
   vnet_device_and_queue_t *dq;
   u32 thread_index = node->thread_index;
+  clib_time_t *ct = &vm->clib_time;
+  u64 now;
+  int i, rc;
 
   /*
    * Poll all devices on this cpu for input/interrupts.
@@ -489,6 +560,39 @@ VLIB_NODE_FN (dpdk_input_node) (vlib_main_t * vm, vlib_node_runtime_t * node,
 	{
 	  tghqos_port_tx_routine (xd->port_id);
 	}
+
+      /* Terragraph: periodically send queue stats to firmware */
+      if (xd->pmd != VNET_DPDK_PMD_WIL6210 || !xd->queue_stats_enabled)
+        continue;
+
+      now = clib_cpu_time_now () * ct->seconds_per_clock * 1e3;
+      if (now - xd->queue_stats_last_time_ms > QUEUE_STATS_INTERVAL_MS)
+        {
+          struct rte_eth_tx_pending_stats pending[TGHQOS_SCHED_PIPES_PER_PORT];
+          memset (pending, 0, sizeof (pending));
+
+          /* get stats from hqos queues */
+          if (xd->flags & DPDK_DEVICE_FLAG_HQOS)
+            {
+              for (i = 0; i < TGHQOS_SCHED_PIPES_PER_PORT; i++)
+                {
+                  pending[i].bytes = tghqos_port_bytes_pending (xd->port_id, i);
+                  pending[i].arrival_rate =
+                      queue_stats_do_arrival_rate (xd, i, now);
+                }
+            }
+          /* send may fail if an ioctl is being processed already, retry */
+          for (i = 0; i < QUEUE_STATS_SEND_TRIES; i++)
+            {
+              /* driver will add stats from its own queues */
+              rc = rte_eth_send_tx_pending_stats (xd->port_id, dq->queue_id,
+                                                  pending,
+                                                  TGHQOS_SCHED_PIPES_PER_PORT);
+              if (rc == 0)
+                break;
+            }
+          xd->queue_stats_last_time_ms = now;
+        }
     }
   /* *INDENT-ON* */
   return n_rx_packets;
-- 
2.30.2

