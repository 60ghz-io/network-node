From 63ad487fc5700748ac38e278421d5cdf341713bc Mon Sep 17 00:00:00 2001
From: Frank Li <frankli1@fb.com>
Date: Tue, 3 Aug 2021 19:45:03 -0700
Subject: [PATCH] cli: remove unix_cli_new_session_process

This process and associated code is not working as intended. Remove
it since it's not particularly important to fix.
---
 src/vlib/unix/cli.c | 144 --------------------------------------------
 1 file changed, 144 deletions(-)

diff --git a/src/vlib/unix/cli.c b/src/vlib/unix/cli.c
index 8120befef..dbb5efbd6 100644
--- a/src/vlib/unix/cli.c
+++ b/src/vlib/unix/cli.c
@@ -456,21 +456,6 @@ typedef enum
   UNIX_CLI_PROCESS_EVENT_QUIT,	      /**< A CLI session wants to close. */
 } unix_cli_process_event_type_t;
 
-/** CLI session telnet negotiation timer events. */
-typedef enum
-{
-  UNIX_CLI_NEW_SESSION_EVENT_ADD, /**< Add a CLI session to the new session list */
-} unix_cli_timeout_event_type_t;
-
-/** Each new session is stored on a list with a deadline after which
- * a prompt is issued, in case the session TELNET negotiation fails to
- * complete. */
-typedef struct
-{
-  uword cf_index; /**< Session index of the new session. */
-  f64 deadline;	  /**< Deadline after which the new session must have a prompt. */
-} unix_cli_new_session_t;
-
 /** CLI global state. */
 typedef struct
 {
@@ -489,12 +474,6 @@ typedef struct
   /** File pool index of current input. */
   u32 current_input_file_index;
 
-  /** New session process node identifier */
-  u32 new_session_process_node_index;
-
-  /** List of new sessions */
-  unix_cli_new_session_t *new_sessions;
-
   /** system default macro table */
   clib_macro_main_t macro_main;
 
@@ -1288,109 +1267,6 @@ unix_cli_file_welcome (unix_cli_main_t * cm, unix_cli_file_t * cf)
 
 }
 
-/**
- * @brief A failsafe manager that ensures CLI sessions issue an initial
- * prompt if TELNET negotiation fails.
- */
-static uword
-unix_cli_new_session_process (vlib_main_t * vm, vlib_node_runtime_t * rt,
-			      vlib_frame_t * f)
-{
-  unix_cli_main_t *cm = &unix_cli_main;
-  uword event_type, *event_data = 0;
-  f64 wait = 10.0;
-
-  while (1)
-    {
-      if (vec_len (cm->new_sessions) > 0)
-	wait = vlib_process_wait_for_event_or_clock (vm, wait);
-      else
-	vlib_process_wait_for_event (vm);
-
-      event_type = vlib_process_get_events (vm, &event_data);
-
-      switch (event_type)
-	{
-	case ~0:		/* no events => timeout */
-	  break;
-
-	case UNIX_CLI_NEW_SESSION_EVENT_ADD:
-	  {
-	    /* Add an identifier to the new session list */
-	    unix_cli_new_session_t ns;
-
-	    ns.cf_index = event_data[0];
-	    ns.deadline = vlib_time_now (vm) + 1.0;
-
-	    vec_add1 (cm->new_sessions, ns);
-
-	    if (wait > 0.1)
-	      wait = 0.1;	/* force a re-evaluation soon, but not too soon */
-	  }
-	  break;
-
-	default:
-	  clib_warning ("BUG: unknown event type 0x%wx", event_type);
-	  break;
-	}
-
-      vec_reset_length (event_data);
-
-      if (vlib_process_suspend_time_is_zero (wait))
-	{
-	  /* Scan the list looking for expired deadlines.
-	   * Emit needed prompts and remove from the list.
-	   * While scanning, look for the nearest new deadline
-	   * for the next iteration.
-	   * Since the list is ordered with newest sessions first
-	   * we can make assumptions about expired sessions being
-	   * contiguous at the beginning and the next deadline is the
-	   * next entry on the list, if any.
-	   */
-	  f64 now = vlib_time_now (vm);
-	  unix_cli_new_session_t *nsp;
-	  word index = 0;
-
-	  wait = INFINITY;
-
-	  vec_foreach (nsp, cm->new_sessions)
-	  {
-	    if (vlib_process_suspend_time_is_zero (nsp->deadline - now))
-	      {
-		/* Deadline reached */
-		unix_cli_file_t *cf;
-
-		/* Mark the highwater */
-		index++;
-
-		/* Check the connection didn't close already */
-		if (pool_is_free_index (cm->cli_file_pool, nsp->cf_index))
-		  continue;
-
-		cf = pool_elt_at_index (cm->cli_file_pool, nsp->cf_index);
-
-		if (!cf->started)
-		  unix_cli_file_welcome (cm, cf);
-	      }
-	    else
-	      {
-		wait = nsp->deadline - now;
-		break;
-	      }
-	  }
-
-	  if (index)
-	    {
-	      /* We have sessions to remove */
-	      vec_delete (cm->new_sessions, index, 0);
-	    }
-	}
-    }
-
-  return 0;
-}
-
-
 /** @brief A mostly no-op Telnet state machine.
  * Process Telnet command bytes in a way that ensures we're mostly
  * transparent to the Telnet protocol. That is, it's mostly a no-op.
@@ -3036,23 +2912,6 @@ unix_cli_listen_read_ready (clib_file_t * uf)
       uf = pool_elt_at_index (fm->file_pool, cf->clib_file_index);
       unix_vlib_cli_output_raw (cf, uf, charmode_option,
 				ARRAY_LEN (charmode_option));
-
-      if (cm->new_session_process_node_index == ~0)
-	{
-	  /* Create thw new session deadline process */
-	  cm->new_session_process_node_index =
-	    vlib_process_create (um->vlib_main, "unix-cli-new-session",
-				 unix_cli_new_session_process,
-				 16 /* log2_n_stack_bytes */ );
-	}
-
-      /* In case the client doesn't negotiate terminal type, register
-       * our session with a process that will emit the prompt if
-       * a deadline passes */
-      vlib_process_signal_event (um->vlib_main,
-				 cm->new_session_process_node_index,
-				 UNIX_CLI_NEW_SESSION_EVENT_ADD, cf_index);
-
     }
 
   return error;
@@ -4119,9 +3978,6 @@ unix_cli_init (vlib_main_t * vm)
 {
   unix_cli_main_t *cm = &unix_cli_main;
 
-  /* Breadcrumb to indicate the new session process
-   * has not been started */
-  cm->new_session_process_node_index = ~0;
   clib_macro_init (&cm->macro_main);
 
   return 0;
-- 
2.30.2

