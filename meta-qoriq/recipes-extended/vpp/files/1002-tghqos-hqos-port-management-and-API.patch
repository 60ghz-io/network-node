From ac75f8e16b2e982508ff3eb2654d472776ce1188 Mon Sep 17 00:00:00 2001
From: Frank Li <frankli1@fb.com>
Date: Tue, 16 Feb 2021 15:21:45 -0800
Subject: [PATCH] tghqos: hqos port management and API

HQoS port management layer with API to initialize a port, to
enqueue packets, and to dequeue and transmit packets from hqos
onto a device, all by dpdk port id.
---
 src/plugins/dpdk/tghqos/tghqos.c | 654 +++++++++++++++++++++++++++++++
 src/plugins/dpdk/tghqos/tghqos.h | 235 +++++++++++
 2 files changed, 889 insertions(+)
 create mode 100644 src/plugins/dpdk/tghqos/tghqos.c
 create mode 100644 src/plugins/dpdk/tghqos/tghqos.h

diff --git a/src/plugins/dpdk/tghqos/tghqos.c b/src/plugins/dpdk/tghqos/tghqos.c
new file mode 100644
index 000000000..f4b953c1a
--- /dev/null
+++ b/src/plugins/dpdk/tghqos/tghqos.c
@@ -0,0 +1,654 @@
+/*
+ * Copyright(c) 2016 Intel Corporation. All rights reserved.
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <vnet/plugin/plugin.h>
+#include "tghqos.h"
+#include <rte_ethdev.h>
+#include <vppinfra/string.h>
+
+tghqos_main_t tghqos_main;
+
+#define EMPTY_STRUCT \
+  {                  \
+    0                \
+  }
+
+#define TG_WIGIG_RATE 275000000 /* Assuming 2.2GbE port for WiGig */
+
+#define TG_WIGIG_FW_TX_RING_DEPTH 4096
+
+/**
+ * Terragraph specific parameters for RED drop scheduling in HQoS.
+ **/
+#define TG_MAX_Q_SIZE_TC0 (4096)
+#define TG_MAX_Q_SIZE_TC1 (4096)
+#define TG_MAX_Q_SIZE_TC2 (4096)
+#define TG_MAX_Q_SIZE_TC3 (4096)
+
+/**
+ * For Green colored packets, the minimum threshold is set to
+ * 3/4th of the MAX Queue size.
+ */
+#define TG_RED_TC0_MIN_TH_G ((TG_MAX_Q_SIZE_TC0 * 3) >> 2)
+#define TG_RED_TC1_MIN_TH_G ((TG_MAX_Q_SIZE_TC1 * 3) >> 2)
+#define TG_RED_TC2_MIN_TH_G ((TG_MAX_Q_SIZE_TC2 * 3) >> 2)
+#define TG_RED_TC3_MIN_TH_G ((TG_MAX_Q_SIZE_TC3 * 3) >> 2)
+
+#define TG_RED_TC0_MAX_TH_G (TG_MAX_Q_SIZE_TC0)
+#define TG_RED_TC1_MAX_TH_G (TG_MAX_Q_SIZE_TC1)
+#define TG_RED_TC2_MAX_TH_G (TG_MAX_Q_SIZE_TC2)
+#define TG_RED_TC3_MAX_TH_G (TG_MAX_Q_SIZE_TC3)
+
+/**
+ * For Yellow colored packets, the minimum threshold is set to
+ * 1/2 of the MAX Queue size.
+ */
+#define TG_RED_TC0_MIN_TH_Y (TG_MAX_Q_SIZE_TC0 >> 1)
+#define TG_RED_TC1_MIN_TH_Y (TG_MAX_Q_SIZE_TC1 >> 1)
+#define TG_RED_TC2_MIN_TH_Y (TG_MAX_Q_SIZE_TC2 >> 1)
+#define TG_RED_TC3_MIN_TH_Y (TG_MAX_Q_SIZE_TC3 >> 1)
+
+/**
+ * For Yellow colored packets, the maximum threshold is set to
+ * 3/4 of the MAX Queue size for correct Green vs Yellow drop precedence.
+ */
+#define TG_RED_TC0_MAX_TH_Y ((TG_MAX_Q_SIZE_TC0 * 3) >> 2)
+#define TG_RED_TC1_MAX_TH_Y ((TG_MAX_Q_SIZE_TC1 * 3) >> 2)
+#define TG_RED_TC2_MAX_TH_Y ((TG_MAX_Q_SIZE_TC2 * 3) >> 2)
+#define TG_RED_TC3_MAX_TH_Y ((TG_MAX_Q_SIZE_TC3 * 3) >> 2)
+
+/* Default tghqos parameters */
+static tghqos_config_t tghqos_params_default = {
+
+    /*
+     * tc_table maps the dscp value to the Traffic Class (tc), Traffic
+     * Class Queue (tc_q) and the Traffic Color. The table is indexed by the
+     * dscp value. The lower 2 bits specify tc_q. These are currently set to 0
+     * for Terragraph, as Terragraph has a single queue for a given TC if WRR
+     * is not enabled.
+     *
+     * The upper 2 bits specify the traffic color for the respective DSCP
+     * value. Since only AFxy traffic specifies color in the DSCP, non-AFxy
+     * traffic is defaulted to yellow (on TC3), per Terragraph requirements.
+     *
+     * The middle 4 bits specify the TC. Terragraph currently only supports 4
+     * TCs (0, 1,2,3). 0 being the highest priority and 3 is the lowest. This
+     * conforms to the hqos Scheduler's handling of the priority of the TC
+     * queues.
+     *
+     * Some example DSCP => TC mappings
+     *
+     * DSCP AF11, 10 (Decimal) <-> TC 3, Green => binary 01001100 <-> 0x4c
+     * DSCP AF21, 18 (Decimal) <-> TC 2, Green => binary 01001000 <-> 0x48
+     * DSCP AF32, 28 (Decimal) <-> TC 1, Yellow => binary 10000100 <-> 0x84
+     * DSCP AF41, 34 (Decimal) <-> TC 0, Green => binary 01000000 <-> 0x40
+     * DSCP EF (non-AFxy), 46 (Decimal) <-> TC 3, Yellow => binary 10001100 <-> 0x8c
+     */
+    .tc_table =
+        {
+            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c,
+            0x8c, 0x8c, 0x8c, 0xcc, 0x8c, 0x8c, 0x8c, 0x48, 0x8c, 0x88, 0x8c,
+            0xc8, 0x8c, 0x8c, 0x8c, 0x44, 0x8c, 0x84, 0x8c, 0xc4, 0x8c, 0x8c,
+            0x8c, 0x40, 0x8c, 0x80, 0x8c, 0xc0, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
+            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
+            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
+        },
+    .clear_stats_on_read = 1,
+};
+
+/* Default port-level tghqos parameters */
+static tghqos_port_config_t tghqos_port_params_default = {
+    .rate = TG_WIGIG_RATE,
+    .frame_overhead = TGHQOS_SCHED_FRAME_OVERHEAD_DEFAULT,
+    .fw_tx_ring_depth = 256,
+    .burst_deq = 32,
+    .burst_enq = 32,
+    .swq_size = 4096,
+    .queue_size =
+        {
+            /* Traffic Class 0 */
+            {TG_MAX_Q_SIZE_TC0, TG_MAX_Q_SIZE_TC0, TG_MAX_Q_SIZE_TC0,
+             TG_MAX_Q_SIZE_TC0},
+            /* Traffic Class 1 */
+            {TG_MAX_Q_SIZE_TC1, TG_MAX_Q_SIZE_TC1, TG_MAX_Q_SIZE_TC1,
+             TG_MAX_Q_SIZE_TC1},
+            /* Traffic Class 2 */
+            {TG_MAX_Q_SIZE_TC2, TG_MAX_Q_SIZE_TC2, TG_MAX_Q_SIZE_TC2,
+             TG_MAX_Q_SIZE_TC2},
+            /* Traffic Class 3 */
+            {TG_MAX_Q_SIZE_TC3, TG_MAX_Q_SIZE_TC3, TG_MAX_Q_SIZE_TC3,
+             TG_MAX_Q_SIZE_TC3},
+
+            /* TODO: TCs 4-7 currently unused */
+            {0},
+            {0},
+            {0},
+            {0},
+        },
+    .red_params =
+        {
+            /* Traffic Class 0 Colors Green / Yellow / Red */
+            [0][0] = {.min_th = TG_RED_TC0_MIN_TH_G,
+                      .max_th = TG_RED_TC0_MAX_TH_G,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [0][1] = {.min_th = TG_RED_TC0_MIN_TH_Y,
+                      .max_th = TG_RED_TC0_MAX_TH_Y,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [0][2] = {.min_th = 0, .max_th = 0, .maxp_inv = 10, .wq_log2 = 9},
+
+            /* Traffic Class 1 - Colors Green / Yellow / Red */
+            [1][0] = {.min_th = TG_RED_TC1_MIN_TH_G,
+                      .max_th = TG_RED_TC1_MAX_TH_G,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [1][1] = {.min_th = TG_RED_TC1_MIN_TH_Y,
+                      .max_th = TG_RED_TC1_MAX_TH_Y,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [1][2] = {.min_th = 0, .max_th = 0, .maxp_inv = 10, .wq_log2 = 9},
+
+            /* Traffic Class 2 - Colors Green / Yellow / Red */
+            [2][0] = {.min_th = TG_RED_TC2_MIN_TH_G,
+                      .max_th = TG_RED_TC2_MAX_TH_G,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [2][1] = {.min_th = TG_RED_TC2_MIN_TH_Y,
+                      .max_th = TG_RED_TC2_MAX_TH_Y,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [2][2] = {.min_th = 0, .max_th = 0, .maxp_inv = 10, .wq_log2 = 9},
+
+            /* Traffic Class 3 - Colors Green / Yellow / Red */
+            [3][0] = {.min_th = TG_RED_TC3_MIN_TH_G,
+                      .max_th = TG_RED_TC3_MAX_TH_G,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [3][1] = {.min_th = TG_RED_TC3_MIN_TH_Y,
+                      .max_th = TG_RED_TC3_MAX_TH_Y,
+                      .maxp_inv = 10,
+                      .wq_log2 = 9},
+            [3][2] = {.min_th = 0, .max_th = 0, .maxp_inv = 10, .wq_log2 = 9},
+
+            /* TODO: TCs 4-7 currently unused */
+            [4] = {{0}},
+            [5] = {{0}},
+            [6] = {{0}},
+            [7] = {{0}},
+        },
+};
+
+/**
+ * @brief Check that all parameter values are valid queue sizes: no larger than
+ * TGHQOS_SCHED_MAX_QUEUE_SIZE and a power of 2.
+ */
+static inline int tghqos_valid_queue_sizes (u32 q0, u32 q1, u32 q2, u32 q3)
+{
+  return q0 <= TGHQOS_SCHED_MAX_QUEUE_SIZE && q0 != 0 &&
+         ((q0 & (q0 - 1)) == 0) && q1 <= TGHQOS_SCHED_MAX_QUEUE_SIZE &&
+         q1 != 0 && ((q1 & (q1 - 1)) == 0) &&
+         q2 <= TGHQOS_SCHED_MAX_QUEUE_SIZE && q2 != 0 &&
+         ((q2 & (q2 - 1)) == 0) && q3 <= TGHQOS_SCHED_MAX_QUEUE_SIZE &&
+         q3 != 0 && ((q3 & (q3 - 1)) == 0);
+}
+
+/**
+ * @brief Read default configurations from VPP startup.conf file.
+ */
+static clib_error_t *tghqos_config (vlib_main_t *vm, unformat_input_t *input)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  u32 tc, q0, q1, q2, q3;
+  u8 *color_str;
+  u32 min_th, max_th, maxp_inv, wq_log2, color;
+
+  clib_memcpy_fast (&tm->config, &tghqos_params_default, sizeof (tm->config));
+  clib_memcpy_fast (&tm->default_port_config, &tghqos_port_params_default,
+                    sizeof (tm->default_port_config));
+
+  while (unformat_check_input (input) != UNFORMAT_END_OF_INPUT)
+    {
+      if (unformat (input, "clear-stats %u", &tm->config.clear_stats_on_read))
+        ;
+      else if (unformat (input, "rate %u", &tm->default_port_config.rate))
+        ;
+      else if (unformat (input, "frame_overhead %u",
+                         &tm->default_port_config.frame_overhead))
+        ;
+      else if (unformat (input, "fw-tx-ring-depth %u",
+                         &tm->default_port_config.fw_tx_ring_depth))
+        ;
+      else if (unformat (input, "burst-deq %u",
+                         &tm->default_port_config.burst_deq))
+        ;
+      else if (unformat (input, "burst-enq %u",
+                         &tm->default_port_config.burst_enq))
+        ;
+      else if (unformat (input, "tc %u queue-size %u %u %u %u", &tc, &q0, &q1,
+                         &q2, &q3))
+        {
+          if (tc >= TGHQOS_SCHED_TRAFFIC_CLASSES_PER_PIPE)
+            return clib_error_return (0, "invalid tc %u", tc);
+          if (!tghqos_valid_queue_sizes (q0, q1, q2, q3))
+            return clib_error_return (
+                0, "invalid queue size for tc %u among %u %u %u %u", tc, q0,
+                q1, q2, q3);
+          tm->default_port_config.queue_size[tc][0] = q0;
+          tm->default_port_config.queue_size[tc][1] = q1;
+          tm->default_port_config.queue_size[tc][2] = q2;
+          tm->default_port_config.queue_size[tc][3] = q3;
+        }
+      else if (unformat (input,
+                         "red_params tc %u color %s min_th %u max_th %u "
+                         "maxp_inv %u wq_log2 %u",
+                         &tc, &color_str, &min_th, &max_th, &maxp_inv,
+                         &wq_log2))
+        {
+          if (color_str[0] == 'g')
+            color = 0;
+          else if (color_str[0] == 'y')
+            color = 1;
+          else if (color_str[0] == 'r')
+            color = 2;
+          else
+            {
+              vec_free (color_str);
+              return clib_error_return (0, "invalid color");
+            }
+          vec_free (color_str);
+          if (tc >= TGHQOS_SCHED_TRAFFIC_CLASSES_PER_PIPE)
+            return clib_error_return (0, "invalid tc %u", tc);
+          tm->default_port_config.red_params[tc][color].min_th = min_th;
+          tm->default_port_config.red_params[tc][color].max_th = max_th;
+          tm->default_port_config.red_params[tc][color].maxp_inv = maxp_inv;
+          tm->default_port_config.red_params[tc][color].wq_log2 = wq_log2;
+        }
+      else
+        return clib_error_return (0, "unknown input `%U'",
+                                  format_unformat_error, input);
+    }
+  return 0;
+}
+
+VLIB_CONFIG_FUNCTION (tghqos_config, "tghqos");
+
+void tghqos_init (vlib_main_t *vm)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  vlib_thread_main_t *thm = vlib_get_thread_main ();
+  uword *p_hqos;
+  vlib_thread_registration_t *tr_hqos;
+
+  tm->vlib_main = vm;
+  tm->vnet_main = vnet_get_main ();
+  tm->log_default = vlib_log_register_class ("tghqos", 0);
+
+  /* Find out which cpus will be used for I/O TX */
+  p_hqos = hash_get_mem (thm->thread_registrations_by_name, "tghqos-threads");
+  tr_hqos = p_hqos ? (vlib_thread_registration_t *)p_hqos[0] : 0;
+
+  if (tr_hqos && tr_hqos->count > 0)
+    {
+      tm->cpu_first_index = tr_hqos->first_index;
+      tm->cpu_count = tr_hqos->count;
+      tm->next_cpu = 0;
+    }
+  vec_validate (tm->ports_by_hqos_cpu, thm->n_vlib_mains - 1);
+}
+
+clib_error_t *tghqos_port_init (u16 dpdk_port_id, u32 hw_if_index,
+                                int specify_thread, int thread, int cpu_socket)
+{
+  vlib_thread_main_t *thm = vlib_get_thread_main ();
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_sched_port_t *port;
+  tghqos_port_config_t *config;
+  int rc;
+  int cpu;
+  int worker_thread_first = 0;
+  int worker_thread_count = 0;
+  uword *p;
+  vlib_thread_registration_t *tr;
+  int i;
+  char name[64];
+  tghqos_port_thread_data_t *thread_data;
+
+  /* Initialize ports vector */
+  vec_validate_init_empty (tm->ports, dpdk_port_id,
+                           (tghqos_sched_port_t)EMPTY_STRUCT);
+  port = vec_elt_at_index (tm->ports, dpdk_port_id);
+  rte_spinlock_init (&port->lock);
+
+  /* Initialize configs vector to defaults */
+  vec_validate_init_empty (tm->port_configs, dpdk_port_id,
+                           tm->default_port_config);
+  config = vec_elt_at_index (tm->port_configs, dpdk_port_id);
+
+  /* Save hw_if_index to dpdk_port_id mapping */
+  vec_validate_init_empty (tm->hw_if_index_to_port_id, hw_if_index, ~0);
+  tm->hw_if_index_to_port_id[hw_if_index] = dpdk_port_id;
+
+  /* Get tx pipe size from device for proper depth configuration later */
+  rte_eth_get_tx_pipe_size (dpdk_port_id, 0, port->hw_tx_pipe_size,
+                            TGHQOS_SCHED_PIPES_PER_PORT);
+
+  /* Configurations */
+  rc = tghqos_sched_port_red_config (port, config->red_params);
+  if (rc)
+    {
+      return clib_error_return (
+          0, "Failed to configure RED for port %u, error: %d\n", dpdk_port_id,
+          rc);
+    }
+  tghqos_sched_port_queue_size_config (port, config->queue_size);
+  tghqos_sched_port_rate_config (port, config->rate);
+  tghqos_sched_port_fw_tx_ring_depth_config (port, config->fw_tx_ring_depth);
+  port->frame_overhead = config->frame_overhead;
+  port->burst_deq = config->burst_deq;
+  port->burst_enq = config->burst_enq;
+
+  /* Set up thread data when using hqos threads */
+  if (tm->cpu_count > 0)
+    {
+      if (specify_thread)
+        {
+          /* Assign thread as specified */
+          if (thread >= tm->cpu_count)
+            return clib_error_return (0, "invalid HQoS thread index");
+
+          cpu = tm->cpu_first_index + thread;
+        }
+      else
+        {
+          /* Assign threads in round robin fashion */
+          cpu = tm->cpu_first_index + tm->next_cpu;
+          tm->next_cpu++;
+          if (tm->next_cpu == tm->cpu_count)
+            tm->next_cpu = 0;
+        }
+      vec_add1 (tm->ports_by_hqos_cpu[cpu], dpdk_port_id);
+
+      /* Detect set of worker threads */
+      p = hash_get_mem (thm->thread_registrations_by_name, "workers");
+      tr = p ? (vlib_thread_registration_t *)p[0] : 0;
+      if (tr && tr->count > 0)
+        {
+          worker_thread_first = tr->first_index;
+          worker_thread_count = tr->count;
+        }
+
+      /* Initialize per-port thread data */
+      vec_validate_init_empty_aligned (tm->threads, dpdk_port_id,
+                                       (tghqos_port_thread_data_t)EMPTY_STRUCT,
+                                       CLIB_CACHE_LINE_BYTES);
+      thread_data = vec_elt_at_index (tm->threads, dpdk_port_id);
+      vec_validate (thread_data->pkts_enq, 2 * port->burst_enq - 1);
+      vec_validate (thread_data->pkts_deq, port->burst_deq - 1);
+
+      /* Allocate space for one SWQ per worker thread */
+      vec_validate (thread_data->swq, worker_thread_count);
+      for (i = 0; i < worker_thread_count + 1; i++)
+        {
+          u32 swq_flags = RING_F_SP_ENQ | RING_F_SC_DEQ;
+
+          snprintf (name, sizeof (name), "SWQ-worker%u-to-device%u", i,
+                    dpdk_port_id);
+          thread_data->swq[i] =
+              rte_ring_create (name, config->swq_size, cpu_socket, swq_flags);
+          if (thread_data->swq[i] == NULL)
+            return clib_error_return (
+                0, "SWQ-worker%u-to-device%u: rte_ring_create err", i,
+                dpdk_port_id);
+        }
+      /* Assign swqs for each thread to use */
+      vec_validate (thread_data->swq_by_tid, thm->n_vlib_mains - 1);
+      for (i = 0; i < worker_thread_count + 1; i++)
+        {
+          u32 tid;
+          if (i)
+            tid = worker_thread_first + (i - 1);
+          else
+            tid = i;
+          thread_data->swq_by_tid[tid] = thread_data->swq[i];
+        }
+    }
+  else
+    {
+      /* No separate hqos threads, but just use the pkts_deq array */
+      vec_validate_init_empty_aligned (tm->threads, dpdk_port_id,
+                                       (tghqos_port_thread_data_t)EMPTY_STRUCT,
+                                       CLIB_CACHE_LINE_BYTES);
+      thread_data = vec_elt_at_index (tm->threads, dpdk_port_id);
+      vec_validate (thread_data->pkts_deq, port->burst_deq - 1);
+    }
+
+  return 0;
+}
+
+void tghqos_set_metadata (struct rte_mbuf **pkts, u32 n_pkts)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  int i;
+  /* TODO: prefetching pipeline for performance optimization? -- inline and
+   * parallelize setting of metadata */
+  for (i = 0; i < n_pkts; i++)
+    {
+      tghqos_sched_set_pkt_metadata (pkts[i], tm->config.tc_table);
+    }
+}
+
+u32 tghqos_port_enqueue (u16 dpdk_port_id, struct rte_mbuf **pkts, u32 n_pkts)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_sched_port_t *port = vec_elt_at_index (tm->ports, dpdk_port_id);
+  u32 num;
+
+  num = tghqos_sched_port_enqueue (port, pkts, n_pkts);
+  return num;
+}
+
+u32 tghqos_port_thread_enqueue (u16 dpdk_port_id, struct rte_mbuf **pkts,
+                                u32 n_pkts, u32 thread_index)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_port_thread_data_t *thread_data =
+      vec_elt_at_index (tm->threads, dpdk_port_id);
+  return rte_ring_sp_enqueue_burst (thread_data->swq_by_tid[thread_index],
+                                    (void **)pkts, n_pkts, 0);
+}
+
+static inline void
+tghqos_port_tx_routine_internal (u16 dpdk_port_id,
+                                 tghqos_sched_port_t *port,
+                                 tghqos_port_thread_data_t *td)
+{
+  u32 n_pkts, pkts_deq_len, i, j;
+  u32 credits[TGHQOS_SCHED_PIPES_PER_PORT]; /* in packet segments */
+  struct rte_mbuf **pkts_deq = td->pkts_deq;
+
+  /* resync time */
+  tghqos_sched_port_time_resync (port);
+
+  if (rte_eth_get_tx_feedback (dpdk_port_id, 0, credits, 0,
+                               TGHQOS_SCHED_PIPES_PER_PORT) <= 0)
+    return;
+
+  rte_spinlock_lock (&port->lock);
+  for (i = 0; i < TGHQOS_SCHED_PIPES_PER_PORT; i++)
+    {
+      if (credits[i] == 0)
+        continue;
+      if (credits[i] > port->min_tx_pipe_credit[i])
+        {
+          /* Ensure we do not push too many packets into the HW queue */
+          credits[i] -= port->min_tx_pipe_credit[i];
+        }
+      else
+        {
+          continue; /* Not enough credit */
+        }
+      if (credits[i] > port->burst_deq)
+        credits[i] = port->burst_deq;
+
+      pkts_deq_len =
+          tghqos_sched_port_dequeue_pipe (port, i, pkts_deq, credits[i]);
+      if (pkts_deq_len <= 0)
+        continue;
+
+      n_pkts = rte_eth_tx_burst (dpdk_port_id, 0 /* queue_id */, pkts_deq,
+                                 pkts_deq_len);
+      /* Free untransmitted packets. There shouldn't be any unless there is a
+       driver error or state change. */
+      for (j = n_pkts; j < pkts_deq_len; j++)
+        {
+          rte_pktmbuf_free (pkts_deq[j]);
+        }
+    }
+  rte_spinlock_unlock (&port->lock);
+}
+
+void tghqos_port_tx_routine (u16 dpdk_port_id)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_sched_port_t *port = vec_elt_at_index (tm->ports, dpdk_port_id);
+  tghqos_port_thread_data_t *td = vec_elt_at_index (tm->threads, dpdk_port_id);
+
+  tghqos_port_tx_routine_internal (dpdk_port_id, port, td);
+}
+
+u32 tghqos_port_bytes_pending (u16 dpdk_port_id, u32 pipe)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_sched_port_t *port = vec_elt_at_index (tm->ports, dpdk_port_id);
+  tghqos_sched_pipe_stats_extra_t *stats = &port->pipes[pipe].stats;
+
+  return stats->nw_bytes - stats->nr_bytes;
+}
+
+u32 tghqos_port_bytes_arrived (u16 dpdk_port_id, u32 pipe)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_sched_port_t *port = vec_elt_at_index (tm->ports, dpdk_port_id);
+  tghqos_sched_pipe_stats_extra_t *stats = &port->pipes[pipe].stats;
+
+  return stats->nw_bytes + stats->n_bytes_dropped;
+}
+
+static_always_inline void tghqos_thread_internal (vlib_main_t *vm)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  u32 thread_index = vm->thread_index;
+  u32 port_pos;
+  u32 swq_pos;
+
+  swq_pos = 0;
+  port_pos = 0;
+  while (1)
+    {
+      vlib_worker_thread_barrier_check ();
+
+      u32 n_ports = vec_len (tm->ports_by_hqos_cpu[thread_index]);
+      if (PREDICT_FALSE (n_ports == 0))
+        {
+          port_pos = 0;
+          continue;
+        }
+      if (port_pos >= n_ports)
+        port_pos = 0;
+
+      u16 port_id = tm->ports_by_hqos_cpu[thread_index][port_pos];
+
+      tghqos_sched_port_t *port = vec_elt_at_index (tm->ports, port_id);
+      tghqos_port_thread_data_t *thread_data =
+          vec_elt_at_index (tm->threads, port_id);
+
+      struct rte_mbuf **pkts_enq = thread_data->pkts_enq;
+      u32 pkts_enq_len = 0;
+      u32 n_swq = vec_len (thread_data->swq);
+
+      /*
+       * SWQ dequeue and HQoS enqueue for current device
+       */
+      u32 i;
+      for (i = 0; i < n_swq; i++)
+        {
+          /* Get current SWQ for this device */
+          struct rte_ring *swq = thread_data->swq[swq_pos];
+
+          /* Read SWQ burst to packet buffer of this device */
+          pkts_enq_len += rte_ring_sc_dequeue_burst (swq, (void **)pkts_enq,
+                                                     port->burst_enq, 0);
+
+          /* Get next SWQ for this device */
+          swq_pos++;
+          if (swq_pos >= n_swq)
+            swq_pos = 0;
+
+          /* HQoS enqueue */
+          if (pkts_enq_len >= 1)
+            {
+              tghqos_port_enqueue (port_id, pkts_enq, pkts_enq_len);
+              break;
+            }
+        }
+
+      /*
+       * HQoS dequeue and HWQ TX enqueue for current device
+       */
+      tghqos_port_tx_routine_internal (port_id, port, thread_data);
+
+      /* Advance to next device */
+      port_pos++;
+    }
+}
+
+void tghqos_thread (vlib_worker_thread_t *w)
+{
+  vlib_main_t *vm;
+  vlib_thread_main_t *tm = vlib_get_thread_main ();
+  tghqos_main_t *tgm = &tghqos_main;
+
+  vm = vlib_get_main ();
+
+  ASSERT (vm->thread_index == vlib_get_thread_index ());
+
+  clib_time_init (&vm->clib_time);
+  clib_mem_set_heap (w->thread_mheap);
+
+  /* Wait until the dpdk init sequence is complete */
+  while (tm->worker_thread_release == 0)
+    vlib_worker_thread_barrier_check ();
+
+  if (vec_len (tgm->ports_by_hqos_cpu[vm->thread_index]) == 0)
+    return clib_error (
+        "current I/O TX thread does not have any devices assigned to it");
+
+  tghqos_thread_internal (vm);
+}
+
+void tghqos_thread_fn (void *arg)
+{
+  vlib_worker_thread_t *w = (vlib_worker_thread_t *)arg;
+  vlib_worker_thread_init (w);
+  tghqos_thread (w);
+}
+
+VLIB_REGISTER_THREAD (tghqos_thread_reg, static) = {
+    .name = "tghqos-threads",
+    .short_name = "tghqos-threads",
+    .function = tghqos_thread_fn,
+};
diff --git a/src/plugins/dpdk/tghqos/tghqos.h b/src/plugins/dpdk/tghqos/tghqos.h
new file mode 100644
index 000000000..b07320c24
--- /dev/null
+++ b/src/plugins/dpdk/tghqos/tghqos.h
@@ -0,0 +1,235 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to
+ * deal in the Software without restriction, including without limitation the
+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+ * sell copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+/**
+ * @file
+ * TGHQoS
+ *
+ * Hierarchical Quality of Service library for Terragraph.
+ */
+
+#define ALLOW_EXPERIMENTAL_API
+
+#undef always_inline
+#include <rte_mbuf.h>
+#include <vnet/vnet.h>
+#include "sched/tghqos_sched.h"
+
+#ifndef __TGHQOS_H_INCLUDED__
+#define __TGHQOS_H_INCLUDED__
+
+/**
+ * Port-level configurations.
+ * Values used to configure parameters that affect a port's operation. These
+ * values are for convenience to display and for configuration. Parameters used
+ * during actual operation are stored in tghqos_sched_port_t
+ */
+typedef struct
+{
+  u32 rate;             /* Interface throughput rate in bytes per second */
+  u32 frame_overhead;   /* Ethernet framing overhead in bytes */
+  u16 fw_tx_ring_depth; /* Maximum firmware transmit ring depth in segments */
+  u32 burst_deq; /* Maximum number of segments to dequeue from hqos at once
+                  * per pipe */
+  u32 burst_enq; /* Number of segments to dequeue from swq before doing hqos
+                  * enqueue when using hqos threads */
+  u32 swq_size;  /* Size of software queue used to hand off packet segments to
+                  * hqos threads */
+
+  /* Queue sizes per traffic class and queue index */
+  u32 queue_size[TGHQOS_SCHED_TRAFFIC_CLASSES_PER_PIPE]
+                [TGHQOS_SCHED_QUEUES_PER_TRAFFIC_CLASS];
+  /* Parameters used to set the RED config. */
+  struct tghqos_red_params red_params[TGHQOS_SCHED_TRAFFIC_CLASSES_PER_PIPE]
+                                     [TGHQOS_COLORS];
+} tghqos_port_config_t;
+
+/**
+ * Library-level configuration.
+ */
+typedef struct
+{
+  u32 tc_table[NUM_DSCP_VALUES]; /* DSCP value to hierarchy mapping */
+  u32 clear_stats_on_read;       /* Clear stored stats after reading */
+} tghqos_config_t;
+
+/**
+ * Per-port data used for hqos threads
+ */
+typedef struct
+{
+  struct rte_ring **swq;        /* Software rings */
+  struct rte_ring **swq_by_tid; /* Rings indexed by thread */
+  struct rte_mbuf **pkts_enq;   /* Array of packets to enqueue on hqos */
+  struct rte_mbuf **pkts_deq;   /* Array of packets dequeued from hqos */
+  u32 swq_pos;                  /* Current swq index */
+} tghqos_port_thread_data_t __attribute__ ((aligned (CLIB_CACHE_LINE_BYTES)));
+
+/**
+ * TGHQoS
+ */
+typedef struct
+{
+  /* convenience */
+  vlib_main_t *vlib_main;
+  vnet_main_t *vnet_main;
+  /* logging */
+  vlib_log_class_t log_default;
+
+  /* vectors indexed by dpdk port id */
+  tghqos_sched_port_t *ports;         /* initialized ports */
+  tghqos_port_config_t *port_configs; /* port configurations */
+
+  /* vector to map hw_if_index to dpdk_port_id for CLI convenience */
+  u16 *hw_if_index_to_port_id;
+
+  tghqos_config_t config;                   /* library-level configuration */
+  tghqos_port_config_t default_port_config; /* default configuration used for
+                                               port initialization */
+
+  int cpu_first_index;     /* Index of first cpu used for tghqos-threads */
+  int cpu_count;           /* Number of cpus used for tghqos-threads */
+  int next_cpu;            /* Tracker for assigning tghqos-threads */
+  u16 **ports_by_hqos_cpu; /* Vector of vector of port IDs */
+  tghqos_port_thread_data_t *threads; /* Vector of per port thread data */
+} tghqos_main_t;
+
+extern tghqos_main_t tghqos_main;
+
+/* logging */
+#define tghqos_log_err(...) \
+  vlib_log (VLIB_LOG_LEVEL_ERR, tghqos_main.log_default, __VA_ARGS__)
+#define tghqos_log_warn(...) \
+  vlib_log (VLIB_LOG_LEVEL_WARNING, tghqos_main.log_default, __VA_ARGS__)
+#define tghqos_log_notice(...) \
+  vlib_log (VLIB_LOG_LEVEL_NOTICE, tghqos_main.log_default, __VA_ARGS__)
+#define tghqos_log_info(...) \
+  vlib_log (VLIB_LOG_LEVEL_INFO, tghqos_main.log_default, __VA_ARGS__)
+
+/**
+ * @brief Initialize TGHQoS module.
+ *
+ * @param vm vlib_main_t pointer
+ */
+void tghqos_init (vlib_main_t *vm);
+
+/**
+ * @brief Initialize a TGHQoS port for a DPDK device and configure default
+ * port parameters.
+ *
+ * @param dpdk_port_id DPDK port id of output device
+ * @param hw_if_index Hardware interface index of device
+ * @param specify_thread Flag to specify a specific thread passed in as
+ * `thread`
+ * @param thread Thread index to use when specify_thread is set
+ * @param cpu_socket CPU socket of device
+ * @return Error return value
+ */
+clib_error_t *tghqos_port_init (u16 dpdk_port_id, u32 hw_if_index,
+                                int specify_thread, int thread,
+                                int cpu_socket);
+
+/**
+ * @brief Set metadata of packets according to DSCP value.
+ *
+ * @param pkts Array of packets for which metadata will be set
+ * @param n_pkts Number of packets
+ */
+void tghqos_set_metadata (struct rte_mbuf **pkts, u32 n_pkts);
+
+/**
+ * @brief Lock port for packet enqueue/dequeue
+ *
+ * @param dpdk_port_id Port id
+ */
+static inline void tghqos_port_lock (u16 dpdk_port_id)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_sched_port_t *port = vec_elt_at_index (tm->ports, dpdk_port_id);
+  rte_spinlock_lock (&port->lock);
+}
+
+/**
+ * @brief Unlock port for packet enqueue/dequeue
+ *
+ * @param dpdk_port_id Port id
+ */
+static inline void tghqos_port_unlock (u16 dpdk_port_id)
+{
+  tghqos_main_t *tm = &tghqos_main;
+  tghqos_sched_port_t *port = vec_elt_at_index (tm->ports, dpdk_port_id);
+  rte_spinlock_unlock (&port->lock);
+}
+
+/**
+ * @brief Enqueue packets onto a TGHQoS port. Packet metadata must be set
+ * prior to enqueueing.
+ *
+ * @param dpdk_port_id DPDK port id of output device
+ * @param pkts Array of packets to enqueue
+ * @param n_pkts Number of packets to enqueue
+ * @return Number of packets successfully enqueued
+ */
+u32 tghqos_port_enqueue (u16 dpdk_port_id, struct rte_mbuf **pkts, u32 n_pkts);
+
+/**
+ * @brief Enqueue packets to software queue when hqos threads are enabled.
+ * Packet metadata must be set prior to enqueueing.
+ *
+ * @param dpdk_port_id DPDK port id of output device
+ * @param pkts Array of packets to enqueue
+ * @param n_pkts Number of packets to enqueue
+ * @param thread_index Thread index of caller
+ * @return Number of packets successfully enqueued
+ */
+u32 tghqos_port_thread_enqueue (u16 dpdk_port_id, struct rte_mbuf **pkts,
+                                u32 n_pkts, u32 thread_index);
+
+/**
+ * @brief Routine to dequeue packets from HQoS and transmit them on a DPDK
+ * device. Uses feedback from driver to only dequeue a number of packets that
+ * can fit in driver tx rings, and only up to burst_deq packet segments
+ * per pipe.
+ *
+ * @param dpdk_port_id DPDK port id of output device
+ */
+void tghqos_port_tx_routine (u16 dpdk_port_id);
+
+/**
+ * @brief Get number of bytes pending for a pipe.
+ *
+ * @param dpdk_port_id DPDK port id of output device
+ * @param pipe Pipe index
+ * @return Current bytes pending in pipe
+ */
+u32 tghqos_port_bytes_pending (u16 dpdk_port_id, u32 pipe);
+
+/**
+ * @brief Get number of bytes arrived to a pipe.
+ *
+ * @param dpdk_port_id DPDK port id of output device
+ * @param pipe Pipe index
+ * @return Total number of bytes arrived to pipe
+ */
+u32 tghqos_port_bytes_arrived (u16 dpdk_port_id, u32 pipe);
+
+#endif /* __TGHQOS_H_INCLUDED__ */
-- 
2.30.2

