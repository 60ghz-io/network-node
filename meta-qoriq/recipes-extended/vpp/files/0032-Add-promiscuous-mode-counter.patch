From f6bbac8c414ee55847b340a75c79226be332b596 Mon Sep 17 00:00:00 2001
From: Linzhe Li <linzheli@fb.com>
Date: Wed, 30 Jun 2021 14:25:02 -0700
Subject: [PATCH] Add promiscuous mode counter

VPP doesn't track how many services require promiscuous mode to be
enabled. On POP node, currently, both L2 bridging and SR steering will
enable promiscuous mode. When SRv6 tunnel is deleted, promiscuous mode
will be disabled as well. That will cause POP interface dropping all
L2 frames.

By adding this fix, VPP will keep counting the number of services that
has requested promiscuous mode. And only disable promiscuous mode when
the counter decrease to zero.
---
 src/plugins/srv6-ad/ad.c         |  5 ++---
 src/plugins/srv6-as/as.c         |  5 ++---
 src/vnet/bonding/cli.c           |  6 ++----
 src/vnet/bonding/device.c        |  6 ++----
 src/vnet/ethernet/ethernet.h     |  5 +++++
 src/vnet/ethernet/interface.c    | 28 ++++++++++++++++++++++++++++
 src/vnet/ethernet/p2p_ethernet.c |  5 ++---
 src/vnet/interface_cli.c         |  6 +++---
 src/vnet/l2/l2_input.c           |  6 ++----
 src/vnet/l2/l2_patch.c           |  6 ++----
 src/vnet/srv6/sr_steering.c      |  4 ++--
 11 files changed, 52 insertions(+), 30 deletions(-)

diff --git a/src/plugins/srv6-ad/ad.c b/src/plugins/srv6-ad/ad.c
index 045ddeb46..2838fa4d1 100644
--- a/src/plugins/srv6-ad/ad.c
+++ b/src/plugins/srv6-ad/ad.c
@@ -109,8 +109,7 @@ srv6_ad_localsid_creation_fn (ip6_sr_localsid_t * localsid)
 	vnet_get_sup_hw_interface (vnm, ls_mem->sw_if_index_in);
       /* Make sure it is main interface */
       if (hi->sw_if_index == ls_mem->sw_if_index_in)
-	ethernet_set_flags (vnm, hi->hw_if_index,
-			    ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+	ethernet_set_promisc_mode_flag (vnm, ls_mem->sw_if_index_in, 1);
 
       /* Associate local SID index to this interface (resize vector if needed) */
       if (ls_mem->sw_if_index_in >= vec_len (sm->sw_iface_localsid2))
@@ -204,7 +203,7 @@ srv6_ad_localsid_removal_fn (ip6_sr_localsid_t * localsid)
 	vnet_get_sup_hw_interface (vnm, ls_mem->sw_if_index_in);
       /* Make sure it is main interface */
       if (hi->sw_if_index == ls_mem->sw_if_index_in)
-	ethernet_set_flags (vnm, hi->hw_if_index, 0);
+	ethernet_set_promisc_mode_flag (vnm, ls_mem->sw_if_index_in, 0);
 
       /* Remove local SID index from interface table */
       sm->sw_iface_localsid2[ls_mem->sw_if_index_in] = ~(u32) 0;
diff --git a/src/plugins/srv6-as/as.c b/src/plugins/srv6-as/as.c
index d9dbd8aa6..1fe2c527d 100644
--- a/src/plugins/srv6-as/as.c
+++ b/src/plugins/srv6-as/as.c
@@ -181,8 +181,7 @@ srv6_as_localsid_creation_fn (ip6_sr_localsid_t * localsid)
 	vnet_get_sup_hw_interface (vnm, ls_mem->sw_if_index_in);
       /* Make sure it is main interface */
       if (hi->sw_if_index == ls_mem->sw_if_index_in)
-	ethernet_set_flags (vnm, hi->hw_if_index,
-			    ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+	ethernet_set_promisc_mode_flag (vnm, ls_mem->sw_if_index_in, 1);
 
       /* Prepare rewrite string */
       ls_mem->rewrite = prepare_rewrite (ls_mem->src_addr, ls_mem->sid_list,
@@ -286,7 +285,7 @@ srv6_as_localsid_removal_fn (ip6_sr_localsid_t * localsid)
 	vnet_get_sup_hw_interface (vnm, ls_mem->sw_if_index_in);
       /* Make sure it is main interface */
       if (hi->sw_if_index == ls_mem->sw_if_index_in)
-	ethernet_set_flags (vnm, hi->hw_if_index, 0);
+	ethernet_set_promisc_mode_flag (vnm, ls_mem->sw_if_index_in, 0);
 
       /* Remove local SID index from interface table */
       sm->sw_iface_localsid2[ls_mem->sw_if_index_in] = ~(u32) 0;
diff --git a/src/vnet/bonding/cli.c b/src/vnet/bonding/cli.c
index 4ddee4a17..879da78c7 100644
--- a/src/vnet/bonding/cli.c
+++ b/src/vnet/bonding/cli.c
@@ -729,11 +729,9 @@ bond_add_member (vlib_main_t * vm, bond_add_member_args_t * args)
   bond_member_add_del_mac_addrs (bif, mif->sw_if_index, 1 /* is_add */ );
 
   if (bif_hw->l2_if_count)
-    ethernet_set_flags (vnm, mif_hw->hw_if_index,
-			ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+    ethernet_set_promisc_mode_flag (vnm, mif_hw->hw_if_index, 1);
   else
-    ethernet_set_flags (vnm, mif_hw->hw_if_index,
-			/*ETHERNET_INTERFACE_FLAG_DEFAULT_L3 */ 0);
+    ethernet_set_promisc_mode_flag (vnm, mif_hw->hw_if_index, 0);
 
   if (bif->mode == BOND_MODE_LACP)
     {
diff --git a/src/vnet/bonding/device.c b/src/vnet/bonding/device.c
index e14d08a2f..883f3ec14 100644
--- a/src/vnet/bonding/device.c
+++ b/src/vnet/bonding/device.c
@@ -99,8 +99,7 @@ bond_set_l2_mode_function (vnet_main_t * vnm,
       vec_foreach (sw_if_index, bif->members)
       {
 	mif_hw = vnet_get_sup_hw_interface (vnm, *sw_if_index);
-	ethernet_set_flags (vnm, mif_hw->hw_if_index,
-			    ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+	ethernet_set_promisc_mode_flag (vnm, mif_hw->hw_if_index, 1);
       }
     }
   else if ((bif_hw->l2_if_count == 0) && (l2_if_adjust == -1))
@@ -109,8 +108,7 @@ bond_set_l2_mode_function (vnet_main_t * vnm,
       vec_foreach (sw_if_index, bif->members)
       {
 	mif_hw = vnet_get_sup_hw_interface (vnm, *sw_if_index);
-	ethernet_set_flags (vnm, mif_hw->hw_if_index,
-			    /*ETHERNET_INTERFACE_FLAG_DEFAULT_L3 */ 0);
+	ethernet_set_promisc_mode_flag (vnm, mif_hw->hw_if_index, 0);
       }
     }
 
diff --git a/src/vnet/ethernet/ethernet.h b/src/vnet/ethernet/ethernet.h
index cfbe47476..d22da7461 100644
--- a/src/vnet/ethernet/ethernet.h
+++ b/src/vnet/ethernet/ethernet.h
@@ -148,6 +148,9 @@ typedef struct ethernet_interface
 {
   u32 flags;
 
+  /* The count of services that require promiscuous mode to be enabled */
+  u32 promisc_mode_count;
+
   /* Top 16 bits for status and bottom 16 bits for set operation */
 #define ETHERNET_INTERFACE_FLAGS_STATUS_MASK  (0xffff0000)
 #define ETHERNET_INTERFACE_FLAGS_SET_OPN_MASK (0x0000ffff)
@@ -479,6 +482,8 @@ ethernet_buffer_get_header (vlib_buffer_t * b)
 
 ethernet_main_t *ethernet_get_main (vlib_main_t * vm);
 u32 ethernet_set_flags (vnet_main_t * vnm, u32 hw_if_index, u32 flags);
+u32 ethernet_set_promisc_mode_flag (vnet_main_t * vnm, u32 hw_if_index,
+           u32 enable);
 void ethernet_set_eapol_only_flag (vnet_main_t *vnm, u32 hw_if_index,
 				   u32 enable);
 void ethernet_sw_interface_set_l2_mode (vnet_main_t * vnm, u32 sw_if_index,
diff --git a/src/vnet/ethernet/interface.c b/src/vnet/ethernet/interface.c
index fd56af61a..3417ba0f1 100644
--- a/src/vnet/ethernet/interface.c
+++ b/src/vnet/ethernet/interface.c
@@ -490,6 +490,34 @@ ethernet_set_flags (vnet_main_t * vnm, u32 hw_if_index, u32 flags)
   return ~0;
 }
 
+u32
+ethernet_set_promisc_mode_flag (vnet_main_t * vnm, u32 hw_if_index, u32 enable)
+{
+  ethernet_main_t *em = &ethernet_main;
+  vnet_hw_interface_t *hi;
+  ethernet_interface_t *ei;
+
+  hi = vnet_get_hw_interface (vnm, hw_if_index);
+
+  ASSERT (hi->hw_class_index == ethernet_hw_interface_class.index);
+
+  ei = pool_elt_at_index (em->interfaces, hi->hw_instance);
+  if (enable)
+    ei->promisc_mode_count++;
+  else if (ei->promisc_mode_count > 0)
+    ei->promisc_mode_count--;
+
+  if (ei->promisc_mode_count)
+    ei->flags |= ETHERNET_INTERFACE_FLAG_ACCEPT_ALL;
+  else
+    ei->flags &= ~ETHERNET_INTERFACE_FLAG_ACCEPT_ALL;
+
+  if (ei->flag_change)
+    return ei->flag_change (vnm, hi, ei->flags);
+
+  return (u32) ~ 0;
+}
+
 void
 ethernet_set_eapol_only_flag (vnet_main_t *vnm, u32 hw_if_index, u32 enable)
 {
diff --git a/src/vnet/ethernet/p2p_ethernet.c b/src/vnet/ethernet/p2p_ethernet.c
index ddf239014..0473223e6 100644
--- a/src/vnet/ethernet/p2p_ethernet.c
+++ b/src/vnet/ethernet/p2p_ethernet.c
@@ -147,8 +147,7 @@ p2p_ethernet_add_del (vlib_main_t * vm, u32 parent_if_index,
 					   "p2p-ethernet-input",
 					   parent_if_index, 1, 0, 0);
 	      /* Set promiscuous mode on the l2 interface */
-	      ethernet_set_flags (vnm, parent_if_index,
-				  ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+	      ethernet_set_promisc_mode_flag (vnm, parent_if_index, 1);
 
 	    }
 	  p2pm->p2p_ethernet_by_sw_if_index[parent_if_index]++;
@@ -177,7 +176,7 @@ p2p_ethernet_add_del (vlib_main_t * vm, u32 parent_if_index,
 					       "p2p-ethernet-input",
 					       parent_if_index, 0, 0, 0);
 		  /* Disable promiscuous mode on the l2 interface */
-		  ethernet_set_flags (vnm, parent_if_index, 0);
+		  ethernet_set_promisc_mode_flag (vnm, parent_if_index, 0);
 		}
 	      p2pm->p2p_ethernet_by_sw_if_index[parent_if_index]--;
 
diff --git a/src/vnet/interface_cli.c b/src/vnet/interface_cli.c
index a5b9d6320..67bfbfdb5 100644
--- a/src/vnet/interface_cli.c
+++ b/src/vnet/interface_cli.c
@@ -1090,7 +1090,7 @@ promiscuous_cmd (vlib_main_t * vm,
 {
   vnet_main_t *vnm = vnet_get_main ();
   u32 hw_if_index;
-  u32 flags = ETHERNET_INTERFACE_FLAG_ACCEPT_ALL;
+  u32 enable = 1;
   ethernet_main_t *em = &ethernet_main;
   ethernet_interface_t *eif;
 
@@ -1099,7 +1099,7 @@ promiscuous_cmd (vlib_main_t * vm,
     ;
   else if (unformat (input, "off %U",
 		     unformat_ethernet_interface, vnm, &hw_if_index))
-    flags = 0;
+    enable = 0;
   else
     return clib_error_return (0, "unknown input `%U'",
 			      format_unformat_error, input);
@@ -1108,7 +1108,7 @@ promiscuous_cmd (vlib_main_t * vm,
   if (!eif)
     return clib_error_return (0, "not supported");
 
-  ethernet_set_flags (vnm, hw_if_index, flags);
+  ethernet_set_promisc_mode_flag (vnm, hw_if_index, enable);
   return 0;
 }
 
diff --git a/src/vnet/l2/l2_input.c b/src/vnet/l2/l2_input.c
index de22cef60..281e03cb6 100644
--- a/src/vnet/l2/l2_input.c
+++ b/src/vnet/l2/l2_input.c
@@ -492,15 +492,13 @@ set_int_l2_mode (vlib_main_t * vm, vnet_main_t * vnet_main,	/*           */
 	{
 	  /* Just added first L2 interface on this port
 	   * Set promiscuous mode on the l2 interface */
-	  ethernet_set_flags (vnet_main, hi->hw_if_index,
-			      ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+	  ethernet_set_promisc_mode_flag (vnet_main, hi->hw_if_index, 1);
 	}
       else if ((hi->l2_if_count == 0) && (l2_if_adjust == -1))
 	{
 	  /* Just removed only L2 subinterface on this port
 	   * Disable promiscuous mode on the l2 interface */
-	  ethernet_set_flags (vnet_main, hi->hw_if_index,
-			      /*ETHERNET_INTERFACE_FLAG_DEFAULT_L3 */ 0);
+	  ethernet_set_promisc_mode_flag (vnet_main, hi->hw_if_index, 0);
 
 	}
     }
diff --git a/src/vnet/l2/l2_patch.c b/src/vnet/l2/l2_patch.c
index 6de4e50a2..9dce56af5 100644
--- a/src/vnet/l2/l2_patch.c
+++ b/src/vnet/l2/l2_patch.c
@@ -265,16 +265,14 @@ vnet_l2_patch_add_del (u32 rx_sw_if_index, u32 tx_sw_if_index, int is_add)
       l2pm->tx_sw_if_index_by_rx_sw_if_index[rx_sw_if_index]
 	= txhi->sw_if_index;
 
-      ethernet_set_flags (l2pm->vnet_main, rxhi->hw_if_index,
-			  ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+      ethernet_set_promisc_mode_flag (l2pm->vnet_main, rxhi->hw_if_index, 1);
 
       vnet_feature_enable_disable ("device-input", "l2-patch",
 				   rxhi->sw_if_index, 1, 0, 0);
     }
   else
     {
-      ethernet_set_flags (l2pm->vnet_main, rxhi->hw_if_index,
-			  /*ETHERNET_INTERFACE_FLAG_DEFAULT_L3 */ 0);
+      ethernet_set_promisc_mode_flag (l2pm->vnet_main, rxhi->hw_if_index, 0);
 
       vnet_feature_enable_disable ("device-input", "l2-patch",
 				   rxhi->sw_if_index, 0, 0, 0);
diff --git a/src/vnet/srv6/sr_steering.c b/src/vnet/srv6/sr_steering.c
index b9ae581e1..8df98ad24 100644
--- a/src/vnet/srv6/sr_steering.c
+++ b/src/vnet/srv6/sr_steering.c
@@ -142,7 +142,7 @@ sr_steering_policy (int is_del, ip6_address_t * bsid, u32 sr_policy_index,
 		vnet_get_sup_hw_interface (vnm, sw_if_index);
 	      /* Make sure it is main interface */
 	      if (hi->sw_if_index == sw_if_index)
-		ethernet_set_flags (vnm, hi->hw_if_index, 0);
+		ethernet_set_promisc_mode_flag (vnm, hi->hw_if_index, 0);
 	      /* Remove L2 redirection */
 	      ethernet_register_l2_redirect (sm->vlib_main,
 	        sr_policy_rewrite_encaps_l2_node.index, sw_if_index, 0);
@@ -281,7 +281,7 @@ sr_steering_policy (int is_del, ip6_address_t * bsid, u32 sr_policy_index,
       /* Set promiscous mode on main HW interface */
       vnet_main_t *vnm = vnet_get_main ();
       vnet_hw_interface_t *hi = vnet_get_sup_hw_interface (vnm, sw_if_index);
-      ethernet_set_flags (vnm, hi->hw_if_index, ETHERNET_INTERFACE_FLAG_ACCEPT_ALL);
+      ethernet_set_promisc_mode_flag (vnm, hi->hw_if_index, 1);
     }
   else if (traffic_type == SR_STEER_IPV4)
     if (!sr_policy->is_encap)
-- 
2.30.2

