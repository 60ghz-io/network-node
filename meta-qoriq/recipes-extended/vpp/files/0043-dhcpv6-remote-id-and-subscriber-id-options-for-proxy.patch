From 13f17ddf45e182f19f110be7b92d403ae55ac41f Mon Sep 17 00:00:00 2001
From: Ilango Purushothaman <ipurush@fb.com>
Date: Wed, 22 Dec 2021 15:35:23 -0800
Subject: [PATCH] dhcpv6: remote id and subscriber id options for proxy

Summary:
Added DHCPv6 remote ID and subscriber ID options in
relay messages to server.
---
 src/plugins/dhcp/dhcp.api           |   8 ++
 src/plugins/dhcp/dhcp4_proxy_node.c |   5 +-
 src/plugins/dhcp/dhcp6_packet.h     |  12 ++-
 src/plugins/dhcp/dhcp6_proxy_node.c | 149 +++++++++++++++++++++-------
 src/plugins/dhcp/dhcp_api.c         |  10 +-
 src/plugins/dhcp/dhcp_proxy.c       |  12 ++-
 src/plugins/dhcp/dhcp_proxy.h       |  21 +++-
 7 files changed, 165 insertions(+), 52 deletions(-)

diff --git a/src/plugins/dhcp/dhcp.api b/src/plugins/dhcp/dhcp.api
index 4611d5fad..f326828b5 100644
--- a/src/plugins/dhcp/dhcp.api
+++ b/src/plugins/dhcp/dhcp.api
@@ -103,6 +103,10 @@ define dhcp_plugin_control_ping_reply
     @param rx_vrf_id - Rx/interface vrf id
     @param server_vrf_id - server vrf id
     @param is_add - add the config if non-zero, else delete
+    @param remote_id_option - enable dhcp remote id option
+    @param subscriber_id_option - enable dhcp subscriber id option
+    @param enterprise_id - enterprise id to be added in remote id option
+    @param remote_id_mac - mac address to be used as remote id in option
     @param insert_circuit_id - option82 suboption 1 fib number
     @param dhcp_server[] - server address
     @param dhcp_src_address[] - sc address for packets sent to the server
@@ -114,6 +118,10 @@ autoreply define dhcp_proxy_config
   u32 rx_vrf_id;
   u32 server_vrf_id;
   bool is_add;
+  bool remote_id_option;
+  bool subscriber_id_option;
+  u32 enterprise_id;
+  vl_api_mac_address_t remote_id_mac;
   vl_api_address_t dhcp_server;
   vl_api_address_t dhcp_src_address;
 };
diff --git a/src/plugins/dhcp/dhcp4_proxy_node.c b/src/plugins/dhcp/dhcp4_proxy_node.c
index 6a3c51018..950f1ff96 100644
--- a/src/plugins/dhcp/dhcp4_proxy_node.c
+++ b/src/plugins/dhcp/dhcp4_proxy_node.c
@@ -850,6 +850,8 @@ dhcp4_proxy_set_server (ip46_address_t * addr,
 {
   u32 rx_fib_index = 0;
   int rc = 0;
+  u32 enterprise_id = 0;
+  u8 subscriber_id_option = 0, remote_id_option = 0;
 
   const fib_prefix_t all_1s = {
     .fp_len = 32,
@@ -883,7 +885,8 @@ dhcp4_proxy_set_server (ip46_address_t * addr,
     {
       if (dhcp_proxy_server_add (FIB_PROTOCOL_IP4,
 				 addr, src_addr,
-				 rx_fib_index, server_table_id))
+				 rx_fib_index, server_table_id, enterprise_id,
+				 remote_id_option, subscriber_id_option))
 	{
 	  fib_table_entry_special_add (rx_fib_index,
 				       &all_1s,
diff --git a/src/plugins/dhcp/dhcp6_packet.h b/src/plugins/dhcp/dhcp6_packet.h
index d5467952a..870cfa61d 100644
--- a/src/plugins/dhcp/dhcp6_packet.h
+++ b/src/plugins/dhcp/dhcp6_packet.h
@@ -72,7 +72,8 @@ typedef enum dhcpv6_msg_type_
   _(DNS_SEARCH       , 24 , 0 ) \
   _(IA_PD            , 25 , 12) \
   _(IAPREFIX         , 26 , 25) \
-  _(REMOTEID         , 37 , 4 ) \
+  _(REMOTE_ID        , 37 , 10 ) \
+  _(SUBSCRIBER_ID    , 38 , 6 ) \
   _(VSS              , 68 , 1 ) \
   _(CLIENT_LINK_LAYER_ADDRESS, 79 , 2 )
 
@@ -205,7 +206,7 @@ typedef CLIB_PACKED (struct {
 typedef CLIB_PACKED (struct {
   dhcpv6_option_t opt;
   u32 ent_num;
-  u32 rmt_id;
+  u8 rmt_id[6];  // rmt_id[0]:rmt_id[5]: MAC address
 }) dhcpv6_rmt_id_t;
 /* *INDENT-ON* */
 
@@ -217,6 +218,13 @@ typedef CLIB_PACKED (struct {
 }) dhcpv6_client_mac_t;
 /* *INDENT-ON* */
 
+/* *INDENT-OFF* */
+typedef CLIB_PACKED (struct {
+  dhcpv6_option_t opt;
+  u8 data[6];  // data[0]:data[5]: MAC address
+}) dhcpv6_sub_id_t;
+/* *INDENT-ON* */
+
 typedef CLIB_PACKED (struct
 		     {
 		     dhcpv6_option_t opt; u32 iaid; u32 t1;
diff --git a/src/plugins/dhcp/dhcp6_proxy_node.c b/src/plugins/dhcp/dhcp6_proxy_node.c
index 3b95e7f9f..3009642a8 100644
--- a/src/plugins/dhcp/dhcp6_proxy_node.c
+++ b/src/plugins/dhcp/dhcp6_proxy_node.c
@@ -18,6 +18,8 @@
 #include <vlib/vlib.h>
 #include <dhcp/dhcp_proxy.h>
 #include <dhcp/dhcp6_packet.h>
+#include <dhcp/dhcp6_ia_na_client_dp.h>
+#include <dhcp/dhcp6_pd_client_dp.h>
 #include <vnet/mfib/mfib_table.h>
 #include <vnet/mfib/ip6_mfib.h>
 #include <vnet/fib/fib.h>
@@ -120,6 +122,27 @@ ip6_interface_first_global_or_site_address (ip6_main_t * im, u32 sw_if_index)
   return result;
 }
 
+/* get interface mac address */
+static inline u8 get_intf_mac_address (u32 sw_if_index, u8 *mac_addr)
+{
+  vnet_main_t *vnm = vnet_get_main ();
+  vnet_sw_interface_t *si;
+  ethernet_interface_t *eth_if = 0;
+
+  si = vnet_get_sup_sw_interface (vnm, sw_if_index);
+  if (si->type == VNET_SW_INTERFACE_TYPE_HARDWARE)
+    {
+      eth_if = ethernet_get_interface (&ethernet_main, si->hw_if_index);
+      if (eth_if)
+        {
+          mac_address_encode (&eth_if->address.mac, mac_addr);
+          return 0;
+        }
+    }
+  return 1;
+}
+
+
 static inline void
 copy_ip6_address (ip6_address_t * dst, ip6_address_t * src)
 {
@@ -176,8 +199,11 @@ dhcpv6_proxy_to_server_input (vlib_main_t * vm,
 	  dhcpv6_int_id_t *id1;
 	  dhcpv6_vss_t *vss1;
 	  dhcpv6_client_mac_t *cmac;	// client mac
+	  dhcpv6_rmt_id_t *rid;
+	  dhcpv6_sub_id_t *subid;
 	  ethernet_header_t *e_h0;
 	  u8 client_src_mac[6];
+	  u8 local_mac[6];
 	  dhcp_vss_t *vss;
 	  u8 is_solicit = 0;
 
@@ -315,7 +341,7 @@ dhcpv6_proxy_to_server_input (vlib_main_t * vm,
 	link_address_set:
 
 	  if ((b0->current_data + b0->current_length + sizeof (*id1) +
-	       sizeof (*vss1) + sizeof (*cmac)) >
+	       sizeof (*vss1) + sizeof (*rid) + sizeof (*subid)) >
 	      vlib_buffer_get_default_data_size (vm))
 	    {
 	      error0 = DHCPV6_PROXY_ERROR_PKT_TOO_BIG;
@@ -332,20 +358,58 @@ dhcpv6_proxy_to_server_input (vlib_main_t * vm,
 	  id1->int_idx = clib_host_to_net_u32 (rx_sw_if_index);
 
 	  u1->length = 0;
-	  if (h0->msg_type != DHCPV6_MSG_RELAY_FORW)
-	    {
-	      cmac =
-		(dhcpv6_client_mac_t *) (((uword) ip1) + b0->current_length);
-	      b0->current_length += (sizeof (*cmac));
-	      cmac->opt.length = clib_host_to_net_u16 (sizeof (*cmac) -
-						       sizeof (cmac->opt));
-	      cmac->opt.option =
-		clib_host_to_net_u16
-		(DHCPV6_OPTION_CLIENT_LINK_LAYER_ADDRESS);
-	      cmac->link_type = clib_host_to_net_u16 (1);	/* ethernet */
-	      clib_memcpy (cmac->data, client_src_mac, 6);
-	      u1->length += sizeof (*cmac);
-	    }
+
+          // Disable the client link address option by default
+          //   if (h0->msg_type != DHCPV6_MSG_RELAY_FORW)
+          //     {
+          //       cmac =
+          // 	(dhcpv6_client_mac_t *) (((uword) ip1) + b0->current_length);
+          //       b0->current_length += (sizeof (*cmac));
+          //       cmac->opt.length = clib_host_to_net_u16 (sizeof (*cmac) -
+          // 					       sizeof (cmac->opt));
+          //       cmac->opt.option =
+          // 	clib_host_to_net_u16
+          // 	(DHCPV6_OPTION_CLIENT_LINK_LAYER_ADDRESS);
+          //       cmac->link_type = clib_host_to_net_u16 (1);	/* ethernet */
+          //       clib_memcpy (cmac->data, client_src_mac, 6);
+          //       u1->length += sizeof (*cmac);
+          //     }
+
+          // Add REMOTE_ID and SUBSCRIBER_ID options if enabled
+          if (h0->msg_type != DHCPV6_MSG_RELAY_FORW)
+            {
+              if (proxy->remote_id_option && proxy->enterprise_id)
+                {
+                  // Use MAC address of the ingress interface of DHCPv6 packet
+                  // as remote ID
+                  if (get_intf_mac_address (sw_if_index, local_mac))
+                    {
+                      clib_memcpy (local_mac, e_h0->dst_address, 6);
+                    }
+
+                  rid = (dhcpv6_rmt_id_t *)(((uword)ip1) + b0->current_length);
+                  b0->current_length += (sizeof (*rid));
+                  rid->opt.length =
+                      clib_host_to_net_u16 (sizeof (*rid) - sizeof (rid->opt));
+                  rid->opt.option =
+                      clib_host_to_net_u16 (DHCPV6_OPTION_REMOTE_ID);
+                  rid->ent_num = clib_host_to_net_u32 (proxy->enterprise_id);
+                  clib_memcpy (rid->rmt_id, local_mac, 6);
+                  u1->length += sizeof (*rid);
+                }
+              if (proxy->subscriber_id_option)
+                {
+                  subid =
+                      (dhcpv6_sub_id_t *)(((uword)ip1) + b0->current_length);
+                  b0->current_length += (sizeof (*subid));
+                  subid->opt.length = clib_host_to_net_u16 (
+                      sizeof (*subid) - sizeof (subid->opt));
+                  subid->opt.option =
+                      clib_host_to_net_u16 (DHCPV6_OPTION_SUBSCRIBER_ID);
+                  clib_memcpy (subid->data, client_src_mac, 6);
+                  u1->length += sizeof (*subid);
+                }
+            }
 
 	  vss = dhcp_get_vss_info (dpm, rx_fib_idx, FIB_PROTOCOL_IP6);
 
@@ -871,10 +935,10 @@ dhcp6_proxy_init (vlib_main_t * vm)
 
 VLIB_INIT_FUNCTION (dhcp6_proxy_init);
 
-int
-dhcp6_proxy_set_server (ip46_address_t * addr,
-			ip46_address_t * src_addr,
-			u32 rx_table_id, u32 server_table_id, int is_del)
+int dhcp6_proxy_set_server (ip46_address_t *addr, ip46_address_t *src_addr,
+                            u32 rx_table_id, u32 server_table_id,
+                            u32 enterprise_id, int is_del, u8 remote_id_option,
+                            u8 subscriber_id_option)
 {
   vlib_main_t *vm = vlib_get_main ();
   u32 rx_fib_index = 0;
@@ -900,8 +964,8 @@ dhcp6_proxy_set_server (ip46_address_t * addr,
 
   if (is_del)
     {
-      if (dhcp_proxy_server_del (FIB_PROTOCOL_IP6, rx_fib_index,
-				 addr, server_table_id))
+      if (dhcp_proxy_server_del (FIB_PROTOCOL_IP6, rx_fib_index, addr,
+                                 server_table_id))
 	{
 	  mfib_table_entry_delete (rx_fib_index,
 				   &all_dhcp_servers, MFIB_SOURCE_DHCP);
@@ -926,7 +990,8 @@ dhcp6_proxy_set_server (ip46_address_t * addr,
 	.frp_mitf_flags = MFIB_ITF_FLAG_FORWARD,
       };
       if (dhcp_proxy_server_add (FIB_PROTOCOL_IP6, addr, src_addr,
-				 rx_fib_index, server_table_id))
+                                 rx_fib_index, server_table_id, enterprise_id,
+                                 remote_id_option, subscriber_id_option))
 	{
 	  mfib_table_entry_path_update (rx_fib_index,
 					&all_dhcp_servers,
@@ -967,24 +1032,32 @@ dhcpv6_proxy_set_command_fn (vlib_main_t * vm,
 {
   ip46_address_t addr, src_addr;
   int set_server = 0, set_src_address = 0;
-  u32 rx_table_id = 0, server_table_id = 0;
+  u32 rx_table_id = 0, server_table_id = 0, enterprise_id = 0;
   int is_del = 0;
+  u8 remote_id_option = 0;
+  u8 subscriber_id_option = 0;
 
   while (unformat_check_input (input) != UNFORMAT_END_OF_INPUT)
     {
       if (unformat (input, "server %U", unformat_ip6_address, &addr.ip6))
-	set_server = 1;
-      else if (unformat (input, "src-address %U",
-			 unformat_ip6_address, &src_addr.ip6))
-	set_src_address = 1;
+        set_server = 1;
+      else if (unformat (input, "src-address %U", unformat_ip6_address,
+                         &src_addr.ip6))
+        set_src_address = 1;
       else if (unformat (input, "server-fib-id %d", &server_table_id))
-	;
+        ;
       else if (unformat (input, "rx-fib-id %d", &rx_table_id))
-	;
+        ;
+      else if (unformat (input, "enterprise-id %d", &enterprise_id))
+        ;
       else if (unformat (input, "delete") || unformat (input, "del"))
-	is_del = 1;
+        is_del = 1;
+      else if (unformat (input, "remote-id-option"))
+        remote_id_option = 1;
+      else if (unformat (input, "subscriber-id-option"))
+        subscriber_id_option = 1;
       else
-	break;
+        break;
     }
 
   if (is_del || (set_server && set_src_address))
@@ -992,8 +1065,8 @@ dhcpv6_proxy_set_command_fn (vlib_main_t * vm,
       int rv;
 
       rv = dhcp6_proxy_set_server (&addr, &src_addr, rx_table_id,
-				   server_table_id, is_del);
-
+                                   server_table_id, enterprise_id, is_del,
+                                   remote_id_option, subscriber_id_option);
       //TODO: Complete the errors
       switch (rv)
 	{
@@ -1021,10 +1094,12 @@ dhcpv6_proxy_set_command_fn (vlib_main_t * vm,
 
 /* *INDENT-OFF* */
 VLIB_CLI_COMMAND (dhcpv6_proxy_set_command, static) = {
-  .path = "set dhcpv6 proxy",
-  .short_help = "set dhcpv6 proxy [del] server <ipv6-addr> src-address <ipv6-addr> "
-		  "[server-fib-id <fib-id>] [rx-fib-id <fib-id>] ",
-  .function = dhcpv6_proxy_set_command_fn,
+    .path = "set dhcpv6 proxy",
+    .short_help =
+        "set dhcpv6 proxy [del] server <ipv6-addr> src-address <ipv6-addr> "
+        "[server-fib-id <fib-id>] [rx-fib-id <fib-id>] [enterprise-id <ent-id>] "
+        "[remote-id-option <0/1>] [subscriber-id-option <0/1>] ",
+	.function = dhcpv6_proxy_set_command_fn,
 };
 /* *INDENT-ON* */
 
diff --git a/src/plugins/dhcp/dhcp_api.c b/src/plugins/dhcp/dhcp_api.c
index 2b8d41a10..78a35cf31 100644
--- a/src/plugins/dhcp/dhcp_api.c
+++ b/src/plugins/dhcp/dhcp_api.c
@@ -148,11 +148,11 @@ static void vl_api_dhcp_proxy_config_t_handler
     }
   else
     {
-      rv = dhcp6_proxy_set_server (&server,
-				   &src,
-				   (u32) ntohl (mp->rx_vrf_id),
-				   (u32) ntohl (mp->server_vrf_id),
-				   (int) (mp->is_add == 0));
+      rv = dhcp6_proxy_set_server (
+          &server, &src, (u32)ntohl (mp->rx_vrf_id),
+          (u32)ntohl (mp->server_vrf_id), (u32)ntohl (mp->enterprise_id),
+          (int)(mp->is_add == 0), (u8)mp->remote_id_option,
+          (u8)mp->subscriber_id_option);
     }
 
 reply:
diff --git a/src/plugins/dhcp/dhcp_proxy.c b/src/plugins/dhcp/dhcp_proxy.c
index 1890c874b..b3dddbbb3 100644
--- a/src/plugins/dhcp/dhcp_proxy.c
+++ b/src/plugins/dhcp/dhcp_proxy.c
@@ -180,11 +180,10 @@ dhcp_proxy_server_del (fib_protocol_t proto,
   return (0);
 }
 
-int
-dhcp_proxy_server_add (fib_protocol_t proto,
-		       ip46_address_t * addr,
-		       ip46_address_t * src_address,
-		       u32 rx_fib_index, u32 server_table_id)
+int dhcp_proxy_server_add (fib_protocol_t proto, ip46_address_t *addr,
+                           ip46_address_t *src_address, u32 rx_fib_index,
+                           u32 server_table_id, u32 enterprise_id,
+                           u8 remote_id_option, u8 subscriber_id_option)
 {
   dhcp_proxy_main_t *dpm = &dhcp_proxy_main;
   dhcp_proxy_t *proxy = 0;
@@ -206,6 +205,9 @@ dhcp_proxy_server_add (fib_protocol_t proto,
 
       proxy->dhcp_src_address = *src_address;
       proxy->rx_fib_index = rx_fib_index;
+      proxy->remote_id_option = remote_id_option;
+      proxy->subscriber_id_option = subscriber_id_option;
+      proxy->enterprise_id = enterprise_id;
     }
   else
     {
diff --git a/src/plugins/dhcp/dhcp_proxy.h b/src/plugins/dhcp/dhcp_proxy.h
index 3466f0c12..f7b487247 100644
--- a/src/plugins/dhcp/dhcp_proxy.h
+++ b/src/plugins/dhcp/dhcp_proxy.h
@@ -129,6 +129,21 @@ typedef struct dhcp_proxy_t_
      *        is resides.
      */
   u32 rx_fib_index;
+
+     /**
+     * @brief The enterprise ID to be added as an option.
+     */
+  u32 enterprise_id;
+
+    /**
+     * @brief Flag to enable DHCP Remote ID option.
+     */
+  u8 remote_id_option;
+
+    /**
+     * @brief Flag to enable DHCP Subscriber ID option.
+     */
+  u8 subscriber_id_option;
 } dhcp_proxy_t;
 
 #define DHCP_N_PROTOS (FIB_PROTOCOL_IP6 + 1)
@@ -199,7 +214,8 @@ void dhcp_proxy_dump (fib_protocol_t proto, void *opaque, u32 context);
 int dhcp_proxy_server_add (fib_protocol_t proto,
 			   ip46_address_t * addr,
 			   ip46_address_t * src_address,
-			   u32 rx_fib_iindex, u32 server_table_id);
+			   u32 rx_fib_iindex, u32 server_table_id, u32 enterprise_id,
+         u8 remote_id_option, u8 subscriber_id_option);
 
 /**
  * @brief Delete a DHCP proxy config
@@ -289,7 +305,8 @@ dhcp_get_proxy (dhcp_proxy_main_t * dm,
 
 int dhcp6_proxy_set_server (ip46_address_t * addr,
 			    ip46_address_t * src_addr,
-			    u32 rx_table_id, u32 server_table_id, int is_del);
+			    u32 rx_table_id, u32 server_table_id, u32 enterprise_id, int is_del,
+          u8 remote_id_option, u8 subscriber_id_option);
 int dhcp4_proxy_set_server (ip46_address_t * addr,
 			    ip46_address_t * src_addr,
 			    u32 rx_table_id, u32 server_table_id, int is_del);
-- 
2.30.2

