From 2efc0aedf3bc3934f9130fe560776e980933aa3a Mon Sep 17 00:00:00 2001
From: Ilango Purushothaman <ipurush@fb.com>
Date: Wed, 22 Dec 2021 15:38:03 -0800
Subject: [PATCH] dhcpv6: Parse DHCPv6 addresses and update routes

Summary:
Parse DHCPv6 addresses from Reply and Release messages
and add/delete routes to the routing daemon using system calls.
---
 src/plugins/dhcp/dhcp6_proxy_node.c | 113 ++++++++++++++++++++++++++++
 1 file changed, 113 insertions(+)

diff --git a/src/plugins/dhcp/dhcp6_proxy_node.c b/src/plugins/dhcp/dhcp6_proxy_node.c
index 3009642a8..6eb5452da 100644
--- a/src/plugins/dhcp/dhcp6_proxy_node.c
+++ b/src/plugins/dhcp/dhcp6_proxy_node.c
@@ -23,6 +23,8 @@
 #include <vnet/mfib/mfib_table.h>
 #include <vnet/mfib/ip6_mfib.h>
 #include <vnet/fib/fib.h>
+#include <vppinfra/linux/syscall.h>
+#include <vppinfra/linux/sysfs.h>
 
 static char *dhcpv6_proxy_error_strings[] = {
 #define dhcpv6_proxy_error(n,s) s,
@@ -150,6 +152,110 @@ copy_ip6_address (ip6_address_t * dst, ip6_address_t * src)
   dst->as_u64[1] = src->as_u64[1];
 }
 
+/* Advertise/Withdraw DHCPv6 addresses to Open/R routes */
+static void update_dhcpv6_openr_route (ip6_address_t *dhcvp6_addr, bool add)
+{
+  char cmd[1024] = {0};
+  char tmpbuf[1024];
+  u8 *s;
+  s = format (0, "%U", format_ip6_address, dhcvp6_addr);
+
+  memcpy (tmpbuf, s, vec_len (s));
+  tmpbuf[vec_len (s)] = 0;
+  vec_free (s);
+
+  snprintf (cmd, sizeof (cmd),
+            "/usr/bin/breeze prefixmgr %s %s/128 --prefix-type cpe",
+            add ? "advertise" : "withdraw", tmpbuf);
+  clib_warning ("dhcpv6: update route to routing table: %s", cmd);
+  system (cmd);
+}
+
+/* Parse DHCPv6 assigned addresses and add routes. */
+static void get_dhcpv6_addresses_for_routes (dhcpv6_header_t *dhcpv6,
+                                             uint32_t options_length)
+{
+  dhcpv6_option_t *option;
+  dhcp6_address_info_t *addresses = 0;
+  dhcp6_prefix_info_t *prefixes = 0;
+  u32 iaid;
+
+  if (dhcpv6->msg_type != DHCPV6_MSG_REPLY &&
+      dhcpv6->msg_type != DHCPV6_MSG_RELEASE)
+    {
+      return;
+    }
+
+  option = (dhcpv6_option_t *)(dhcpv6 + 1);
+
+  // Walk through the options in the DHCPv6 messages and find DHCPv6 addresses.
+  while (options_length > 0)
+    {
+      if (options_length <
+          clib_net_to_host_u16 (option->length) + sizeof (*option))
+        {
+          break;
+        }
+      u16 oo = clib_net_to_host_u16 (option->option);
+      if (oo == DHCPV6_OPTION_IA_NA || oo == DHCPV6_OPTION_IA_PD)
+        {
+          dhcpv6_ia_header_t *ia_header = (void *)option;
+          iaid = clib_net_to_host_u32 (ia_header->iaid);
+          dhcpv6_option_t *inner_option = (void *)ia_header->data;
+          u16 inner_options_length =
+              clib_net_to_host_u16 (option->length) -
+              (sizeof (*ia_header) - sizeof (dhcpv6_option_t));
+
+          while (inner_options_length > 0)
+            {
+              u16 inner_oo = clib_net_to_host_u16 (inner_option->option);
+
+              if (inner_oo == DHCPV6_OPTION_IAADDR)
+                {
+                  dhcpv6_ia_opt_addr_t *iaaddr = (void *)inner_option;
+                  u32 n_addresses = vec_len (addresses);
+                  vec_validate (addresses, n_addresses);
+                  dhcp6_address_info_t *address_info = &addresses[n_addresses];
+                  address_info->preferred_time =
+                      clib_net_to_host_u32 (iaaddr->preferred);
+                  address_info->valid_time =
+                      clib_net_to_host_u32 (iaaddr->valid);
+                  address_info->address = iaaddr->addr;
+                  update_dhcpv6_openr_route (&address_info->address,
+                                             dhcpv6->msg_type ==
+                                                 DHCPV6_MSG_REPLY);
+                }
+              else if (inner_oo == DHCPV6_OPTION_IAPREFIX)
+                {
+                  dhcpv6_ia_opt_pd_t *iaprefix = (void *)inner_option;
+                  u32 n_prefixes = vec_len (prefixes);
+                  vec_validate (prefixes, n_prefixes);
+                  dhcp6_prefix_info_t *prefix_info = &prefixes[n_prefixes];
+                  prefix_info->preferred_time =
+                      clib_net_to_host_u32 (iaprefix->preferred);
+                  prefix_info->valid_time =
+                      clib_net_to_host_u32 (iaprefix->valid);
+                  prefix_info->prefix_length = iaprefix->prefix;
+                  prefix_info->prefix = iaprefix->addr;
+                  update_dhcpv6_openr_route (&prefix_info->prefix,
+                                             dhcpv6->msg_type ==
+                                                 DHCPV6_MSG_REPLY);
+                }
+              inner_options_length -=
+                  sizeof (*inner_option) +
+                  clib_net_to_host_u16 (inner_option->length);
+              inner_option =
+                  (void *)((u8 *)inner_option + sizeof (*inner_option) +
+                           clib_net_to_host_u16 (inner_option->length));
+            }
+        }
+      options_length -=
+          sizeof (*option) + clib_net_to_host_u16 (option->length);
+      option = (void *)((u8 *)option + sizeof (*option) +
+                        clib_net_to_host_u16 (option->length));
+    }
+}
+
 static uword
 dhcpv6_proxy_to_server_input (vlib_main_t * vm,
 			      vlib_node_runtime_t * node,
@@ -359,6 +465,8 @@ dhcpv6_proxy_to_server_input (vlib_main_t * vm,
 
 	  u1->length = 0;
 
+          // Parse DHCPv6 addresses and add/delete routes.
+          get_dhcpv6_addresses_for_routes (h0, fwd_opt->length);
           // Disable the client link address option by default
           //   if (h0->msg_type != DHCPV6_MSG_RELAY_FORW)
           //     {
@@ -793,6 +901,11 @@ dhcpv6_proxy_to_client_input (vlib_main_t * vm,
        * udp_local hands us the DHCPV6 header, need udp hdr,
        * ip hdr to relay to client
        */
+      // b0 should now point to inner DHCPv6 message.
+      dhcpv6_header_t *inner_dhcp_hdr = vlib_buffer_get_current (b0);
+      // Parse DHCPv6 addresses and add routes.
+      get_dhcpv6_addresses_for_routes (inner_dhcp_hdr, r0->length);
+
       vlib_buffer_advance (b0, -(sizeof (*u1)));
       u1 = vlib_buffer_get_current (b0);
 
-- 
2.30.2

