From 09755afe25ec58a67936fd27a8892d1568f0e5f5 Mon Sep 17 00:00:00 2001
From: vandwalle <vandwalle@fb.com>
Date: Tue, 21 Apr 2020 17:09:33 -0700
Subject: [PATCH] Add Ethernet TX Send Pending Stats API

---
 lib/librte_ethdev/rte_ethdev.h      | 65 ++++++++++++++++++++++++++++-
 lib/librte_ethdev/rte_ethdev_core.h |  9 +++-
 lib/librte_ethdev/version.map       |  1 +
 3 files changed, 72 insertions(+), 3 deletions(-)

diff --git a/lib/librte_ethdev/rte_ethdev.h b/lib/librte_ethdev/rte_ethdev.h
index 4f8102f4d7..395d137e5a 100644
--- a/lib/librte_ethdev/rte_ethdev.h
+++ b/lib/librte_ethdev/rte_ethdev.h
@@ -4763,6 +4763,23 @@ __rte_experimental
 int rte_eth_dev_hairpin_capability_get(uint16_t port_id,
 				       struct rte_eth_hairpin_cap *cap);
 
+/**
+ * @internal
+ * Structure used to send pending data statistics to an internet driver.
+ *
+ * Set values to ~0 in order to invalidate.
+ */
+struct rte_eth_tx_pending_stats {
+	uint32_t bytes;
+	/**< Pending bytes. */
+	uint32_t packets;
+	/**< Pending packets. */
+	uint32_t segments;
+	/**< Pending rte_mbuf segments. */
+	uint32_t arrival_rate;
+	/**< arrival rate in bytes per millisecond. */
+};
+
 #include <rte_ethdev_core.h>
 
 /**
@@ -5192,11 +5209,11 @@ rte_eth_tx_burst(uint16_t port_id, uint16_t queue_id,
  *   The value must be in the range [0, nb_tx_queue - 1] previously supplied
  *   to rte_eth_dev_configure().
  * @param avail
- *   pointer to per flow data: driver to provide either number of packets,
+ *   The pointer to per flow data: driver to provide either number of packets,
  *   or number of rte_mbuf segment that can be enqueued for this Tx Flow.
  *   See RTE_ETH_DEV_CAPA_RUNTIME_TX_FEEDBACK_SEG flag.
  * @param pending
- *   pointer to per flow data: driver to provides number of bytes pending
+ *   The pointer to per flow data: driver to provides number of bytes pending
  *   for this Tx Flow.
  * @param num_flows
  *   The number of traffic flows on which Tx feedback is requested.
@@ -5222,6 +5239,50 @@ rte_eth_get_tx_feedback(uint16_t port_id, uint16_t queue_id,
 	return rc;
 }
 
+/**
+ * Send real time Tx pending statistics on a transmit queue of an Ethernet device.
+ *
+ * This function may be used so as to provide a hint to an eventual firmware or hardware
+ * packet scheduler implemented and controlled by the driver. This functionality
+ * targets ethernet NIC such as WiGig or potentially WiFi.
+ *
+ * The hint comprises of the amount data pending inside the network stack, etc...
+ *
+ * It is assumed that one given Tx queue may support multiple multiple Traffic Flows.
+ * See corresponding rte_eth_get_tx_feedback API.
+ *
+ * @param port_id
+ *   The port identifier of the Ethernet device.
+ * @param queue_id
+ *   The index of the transmit queue through which output packets must be
+ *   sent.
+ *   The value must be in the range [0, nb_tx_queue - 1] previously supplied
+ *   to rte_eth_dev_configure().
+ * @param pending
+ *   The pointer to per flow data.
+ * @param num_flows
+ *   The number of traffic flows on which Tx Pending stats are sent.
+ *   This corresponds to the size of the "rte_eth_tx_pending_stats" arrays
+ *   passed to the driver.
+ * @return
+ *   0 on success, negative otherwise.
+ */
+__rte_experimental
+static inline int
+rte_eth_send_tx_pending_stats(uint16_t port_id, uint16_t queue_id,
+		struct rte_eth_tx_pending_stats *pending, uint32_t num_flows)
+{
+	int rc = -ENOTSUP;
+#ifdef RTE_LIBRTE_ETHDEV_DEBUG
+	RTE_ETH_VALID_PORTID_OR_ERR_RET(port_id, -ENODEV);
+#endif
+	struct rte_eth_dev *dev = &rte_eth_devices[port_id];
+	if (dev->tx_send_pending_stats)
+		rc = (*dev->tx_send_pending_stats)(dev->data->tx_queues[queue_id],
+			pending, num_flows);
+	return rc;
+}
+
 /**
  * Process a burst of output packets on a transmit queue of an Ethernet device.
  *
diff --git a/lib/librte_ethdev/rte_ethdev_core.h b/lib/librte_ethdev/rte_ethdev_core.h
index 2a46d55ef8..5b70074078 100644
--- a/lib/librte_ethdev/rte_ethdev_core.h
+++ b/lib/librte_ethdev/rte_ethdev_core.h
@@ -47,6 +47,11 @@ typedef int (*eth_tx_feedback_t)(void *txq,
 			  uint32_t nb_flows);
 /**< @internal Get transmit feedback on a transmit queue from an Ethernet device. */
 
+typedef int (*eth_tx_send_pending_stats_t)(void *txq,
+				   struct rte_eth_tx_pending_stats *pending,
+				   uint32_t nb_flows);
+/**< @internal Send pending tx stats on a transmit queue from an Ethernet device. */
+
 typedef uint32_t (*eth_rx_queue_count_t)(struct rte_eth_dev *dev,
 					 uint16_t rx_queue_id);
 /**< @internal Get number of used descriptors on a receive queue. */
@@ -89,7 +94,9 @@ struct rte_eth_dev {
 	eth_rx_burst_t rx_pkt_burst; /**< Pointer to PMD receive function. */
 	eth_tx_burst_t tx_pkt_burst; /**< Pointer to PMD transmit function. */
 	eth_tx_prep_t tx_pkt_prepare; /**< Pointer to PMD transmit prepare function. */
-	eth_tx_feedback_t tx_get_feedback; /**< Pointer to PMD transmit prepare function. */
+	eth_tx_feedback_t tx_get_feedback; /**< Pointer to PMD transmit get feedback function. */
+	eth_tx_send_pending_stats_t tx_send_pending_stats;
+	/**< Pointer to PMD tx send pending stats function. */
 
 	eth_rx_queue_count_t       rx_queue_count; /**< Get the number of used RX descriptors. */
 	eth_rx_descriptor_done_t   rx_descriptor_done;   /**< Check rxd DD bit. */
diff --git a/lib/librte_ethdev/version.map b/lib/librte_ethdev/version.map
index 7c4118a8df..978f50c4d7 100644
--- a/lib/librte_ethdev/version.map
+++ b/lib/librte_ethdev/version.map
@@ -243,6 +243,7 @@ EXPERIMENTAL {
 
 	rte_eth_xstats_config;
 	rte_eth_get_tx_feedback;
+	rte_eth_send_tx_pending_stats;
 };
 
 INTERNAL {
-- 
2.30.2

