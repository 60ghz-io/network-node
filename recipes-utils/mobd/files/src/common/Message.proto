/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Mobile app message wire format:
   1. <start-of-message>  2 bytes  'T' 'G'
   2. <payload length>    2 bytes  uint16 network (big endian) byte order
   3. <payload>           n bytes  protobuf (Message)
   4. <payload crc-16>    2-bytes  uint16 network (big endian) byte order

 Mobile app messaging protocol summary:
   * server responds to every message with a good crc that it can decrypt
   * the response message type is the same as the request message type
   * only the payload is encrypted
   * server resets to step 1. of the security handshake
     * when it receives a message with a good crc that it can't decrypt
     * when it receives a plain Hello message with a good crc
     * when it receives an unexpected message during the security handshake

 Message class usage
   * Message is the only payload.
   * The message_body field is omitted when the other fields are
     sufficient. Ex: errors, NodeInfo requests etc.

 Mobile app security handshake:
   1. client ----> server
      Encryption: pre-shared key
      Content   : empty
   2. server ----> client
      Encryption: pre-shared key
      Content   : keygen phrase for the session key
   3. client ----> server
      Encryption: session key
      Content   : empty
   4. server ----> client
      Encryption: session key
      Content   : auth_ok = true
*/

syntax = "proto2";

package facebook.terragraph.mobd;

/*
   [keygen_phrase] Set by the server. Used to generate a new session key.
   [auth_ok]       Set by the server to confirm that the security handshake is done.
 */
message Hello {
  optional bytes keygen_phrase = 1;
  optional bool auth_ok = 2;
}

message NodeInfo {
  optional string uboot_version = 1;
  optional string tg_version = 2;
  optional string dtb_version = 3;
  optional string nic0_mac_address = 4;
  optional string tg_secondary_version = 5;
  repeated string radio_mac = 6;
}

/*
   [initator_mac]  Radio that is initiating the link.
   [responder_mac] Peer radio to form/break a link with.
   [ignite]        In client request: the desired ignition state.
                   In server response: true on success.
 */
message IgniteLink {
  required string initiator_mac = 1;
  required string responder_mac = 2;
  required bool ignite = 3;
}

/*
   [num_test_bytes] Number of random bytes requested by the client.
   [test_data]      Random bytes generated by the server.
                    Server responds with an error if too many bytes are requested.
 */
message Test {
  optional int32 num_test_bytes = 1;
  optional bytes test_data = 2;
}

/*
  Link statistics for associated links.
  If there is no associated link for the specified mac addresses,
  then the 'snr' and 'rssi' arrays will be empty, and Message::error_message
  will be set.

  [initator_mac]  Radio that has initiated the link.
  [responder_mac] Peer radio.
  [timeout_sec]   Statistics collection period, default: 3, min: 2, max: 20
                  Roughly corresponds to the number of snr and rssi samples.
  [snr]           SNR samples for management packets.
                  Empty if link is down, or mac addresses are invalid.
  [rssi]          RSSI samples for management packets
                  Empty if link is down. or mac addresses are invalid.
*/
message LinkStats {
  required string initiator_mac = 1;
  required string responder_mac = 2;
  optional int32 timeout_sec = 3;
  repeated int32 snr = 4;
  repeated int32 rssi = 5;
}

/*
   [message_type]
      Type of the message_body (if any)
   [cookie]
      Set in client requests. Echoed in server responses.
      Used by the client to match requests and responses.
   [error_message]
      Set by the server on all errors.
   [message_body]
      Message corresponding to the message_type.
      Can be omitted when the other fields are sufficient.
      Examples: NodeInfo request, errors
   [wdog_disable_minutes]
      Disable the watchdog for this many minutes.
      Valid range: 0 - 1440. Default: 3 (when field is omitted)
      Zero means enable watchdog after processing the request and sending response.
      Positive values extend the current wdog disable time, but never shorten it.
      The standalone WATCHDOG message can be used to set watchdog disable without
      doing anything else.
*/
message Message {
  enum MessageType {
    HELLO = 1;
    NODE_INFO = 2;
    IGNITE_LINK = 3;
    TEST = 4;
    WATCHDOG = 5;
    LINK_STATS=6;
    REBOOT=7;
    BOOT_SECONDARY_IMAGE=8;
  }
  required MessageType message_type = 1;
  optional int32 cookie = 2;
  optional string error_message = 3;
  optional bytes message_body = 4;
  optional int32 wdog_disable_minutes = 5;
}
